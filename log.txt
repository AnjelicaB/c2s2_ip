DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Linking /scratch/caravel/el595 to /home/el595/c2s2_ip/caravel
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
INFO: Running synthesis on src/fft/pease/fft.yml
DEBUG: Propogating {'DESIGN_NAME': 'PeaseFFTWrapper', 'TEST_FILES': ['../tests/fft.py'], 'DESIGN_IS_CORE': 0, 'FP_PIN_ORDER_CFG': '../fft_pins.cfg', 'CLOCK_PORT': 'clk', 'FP_SIZING': 'absolute', 'CLOCK_PERIOD': 20, 'PL_TARGET_DENSITY': 0.8, 'DESIGNS': [{'SYNTH_PARAMETERS': {'BIT_WIDTH': 16, 'DECIMAL_PT': 8}, 'DESIGNS': [{'SYNTH_PARAMETERS': {'N_SAMPLES': 8}, 'DIE_AREA': '0 0 400 400'}, {'SYNTH_PARAMETERS': {'N_SAMPLES': 16}, 'DIE_AREA': '0 0 800 800'}, {'SYNTH_PARAMETERS': {'N_SAMPLES': 32}, 'DIE_AREA': '0 0 1600 1600'}]}, {'SYNTH_PARAMETERS': {'BIT_WIDTH': 32, 'DECIMAL_PT': 16}, 'DESIGNS': [{'SYNTH_PARAMETERS': {'N_SAMPLES': 8}, 'DIE_AREA': '0 0 800 800'}, {'SYNTH_PARAMETERS': {'N_SAMPLES': 16}, 'DIE_AREA': '0 0 1600 1600'}]}]}
DEBUG: Propogating {'SYNTH_PARAMETERS': {'BIT_WIDTH': 16, 'DECIMAL_PT': 8}, 'DESIGNS': [{'SYNTH_PARAMETERS': {'N_SAMPLES': 8}, 'DIE_AREA': '0 0 400 400'}, {'SYNTH_PARAMETERS': {'N_SAMPLES': 16}, 'DIE_AREA': '0 0 800 800'}, {'SYNTH_PARAMETERS': {'N_SAMPLES': 32}, 'DIE_AREA': '0 0 1600 1600'}]}
DEBUG: Propogating {'SYNTH_PARAMETERS': {'N_SAMPLES': 8}, 'DIE_AREA': '0 0 400 400'}
DEBUG: Propogating {'SYNTH_PARAMETERS': {'N_SAMPLES': 16}, 'DIE_AREA': '0 0 800 800'}
DEBUG: Propogating {'SYNTH_PARAMETERS': {'N_SAMPLES': 32}, 'DIE_AREA': '0 0 1600 1600'}
DEBUG: Propogating {'SYNTH_PARAMETERS': {'BIT_WIDTH': 32, 'DECIMAL_PT': 16}, 'DESIGNS': [{'SYNTH_PARAMETERS': {'N_SAMPLES': 8}, 'DIE_AREA': '0 0 800 800'}, {'SYNTH_PARAMETERS': {'N_SAMPLES': 16}, 'DIE_AREA': '0 0 1600 1600'}]}
DEBUG: Propogating {'SYNTH_PARAMETERS': {'N_SAMPLES': 8}, 'DIE_AREA': '0 0 800 800'}
DEBUG: Propogating {'SYNTH_PARAMETERS': {'N_SAMPLES': 16}, 'DIE_AREA': '0 0 1600 1600'}
INFO: Synthesizing 5 designs
DEBUG: [
  {
    "TEST_FILES": [
      "../tests/fft.py"
    ],
    "SYNTH_PARAMETERS": {
      "BIT_WIDTH": 16,
      "N_SAMPLES": 8,
      "DECIMAL_PT": 8
    },
    "DESIGN_NAME": "PeaseFFTWrapper",
    "FP_PIN_ORDER_CFG": "../fft_pins.cfg",
    "PARAMS": {
      "DESIGN_IS_CORE": 0,
      "FP_SIZING": "absolute",
      "CLOCK_PORT": "clk",
      "DIE_AREA": "0 0 400 400",
      "PL_TARGET_DENSITY": 0.8,
      "CLOCK_PERIOD": 20
    }
  },
  {
    "TEST_FILES": [
      "../tests/fft.py"
    ],
    "SYNTH_PARAMETERS": {
      "BIT_WIDTH": 16,
      "N_SAMPLES": 16,
      "DECIMAL_PT": 8
    },
    "DESIGN_NAME": "PeaseFFTWrapper",
    "FP_PIN_ORDER_CFG": "../fft_pins.cfg",
    "PARAMS": {
      "DESIGN_IS_CORE": 0,
      "FP_SIZING": "absolute",
      "CLOCK_PORT": "clk",
      "DIE_AREA": "0 0 800 800",
      "PL_TARGET_DENSITY": 0.8,
      "CLOCK_PERIOD": 20
    }
  },
  {
    "TEST_FILES": [
      "../tests/fft.py"
    ],
    "SYNTH_PARAMETERS": {
      "BIT_WIDTH": 16,
      "N_SAMPLES": 32,
      "DECIMAL_PT": 8
    },
    "DESIGN_NAME": "PeaseFFTWrapper",
    "FP_PIN_ORDER_CFG": "../fft_pins.cfg",
    "PARAMS": {
      "DESIGN_IS_CORE": 0,
      "FP_SIZING": "absolute",
      "CLOCK_PORT": "clk",
      "DIE_AREA": "0 0 1600 1600",
      "PL_TARGET_DENSITY": 0.8,
      "CLOCK_PERIOD": 20
    }
  },
  {
    "TEST_FILES": [
      "../tests/fft.py"
    ],
    "SYNTH_PARAMETERS": {
      "BIT_WIDTH": 32,
      "N_SAMPLES": 8,
      "DECIMAL_PT": 16
    },
    "DESIGN_NAME": "PeaseFFTWrapper",
    "FP_PIN_ORDER_CFG": "../fft_pins.cfg",
    "PARAMS": {
      "DESIGN_IS_CORE": 0,
      "FP_SIZING": "absolute",
      "CLOCK_PORT": "clk",
      "DIE_AREA": "0 0 800 800",
      "PL_TARGET_DENSITY": 0.8,
      "CLOCK_PERIOD": 20
    }
  },
  {
    "TEST_FILES": [
      "../tests/fft.py"
    ],
    "SYNTH_PARAMETERS": {
      "BIT_WIDTH": 32,
      "N_SAMPLES": 16,
      "DECIMAL_PT": 16
    },
    "DESIGN_NAME": "PeaseFFTWrapper",
    "FP_PIN_ORDER_CFG": "../fft_pins.cfg",
    "PARAMS": {
      "DESIGN_IS_CORE": 0,
      "FP_SIZING": "absolute",
      "CLOCK_PORT": "clk",
      "DIE_AREA": "0 0 1600 1600",
      "PL_TARGET_DENSITY": 0.8,
      "CLOCK_PERIOD": 20
    }
  }
]
INFO: Running pytest in /home/el595/c2s2_ip/build to generate verilog files
INFO: Running pytest on ['src/fft/pease/../tests/fft.py']
============================= test session starts ==============================
platform linux -- Python 3.11.5, pytest-8.0.1, pluggy-1.4.0 -- /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/el595/c2s2_ip/.hypothesis/examples'))
rootdir: /home/el595/c2s2_ip
configfile: pytest.ini
plugins: hypothesis-6.98.9, pymtl3-3.1.16, xdist-3.5.0, custom-exit-code-0.3.0, anyio-4.3.0
created: 10/10 workers
10 workers [312 items]

scheduling tests via LoadScheduling

src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey1] 
src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease1] 
src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease0] 
src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey1] 
src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey0] 
src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease0] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=8,model=CooleyTukey] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=64,model=Pease,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True] 
[gw3] [  0%] PASSED src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease1] 
[gw0] [  0%] PASSED src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease0] 
src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease1] 
src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease0] 
[gw5] [  0%] PASSED src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey1] 
[gw8] [  1%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True] 
[gw9] [  1%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=8,model=Pease] 
[gw4] [  1%] PASSED src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey1] 
[gw2] [  2%] PASSED src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey0] 
src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey1] 
src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey0] 
[gw7] [  2%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=64,model=Pease,slow=True] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=128,model=Pease,slow=True] 
[gw6] [  2%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=8,model=CooleyTukey] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=8,model=CooleyTukey] 
[gw3] [  3%] PASSED src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease1] 
src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease1] 
[gw5] [  3%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=8,model=Pease] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=8,model=Pease] 
[gw0] [  3%] PASSED src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease0] 
src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease0] 
[gw8] [  4%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True] 
[gw4] [  4%] PASSED src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey1] 
src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey1] 
[gw2] [  4%] PASSED src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey0] 
src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey0] 
[gw9] [  5%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True] 
[gw6] [  5%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=8,model=CooleyTukey] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=16,model=CooleyTukey] 
[gw3] [  5%] PASSED src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease1] 
src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease1] 
[gw5] [  6%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=8,model=Pease] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=16,model=Pease] 
[gw0] [  6%] PASSED src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease0] 
src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease0] 
[gw2] [  6%] PASSED src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey0] 
src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey0] 
[gw4] [  7%] PASSED src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey1] 
src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey1] 
[gw8] [  7%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True] 
[gw7] [  7%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=128,model=Pease,slow=True] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=128,model=Pease,slow=True] 
[gw9] [  8%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True] 
[gw3] [  8%] PASSED src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease1] 
src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease1] 
[gw6] [  8%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=16,model=CooleyTukey] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=16,model=CooleyTukey] 
[gw0] [  8%] PASSED src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease0] 
src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease0] 
[gw5] [  9%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=16,model=Pease] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=16,model=Pease] 
[gw2] [  9%] PASSED src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey0] 
src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease1] 
[gw4] [  9%] PASSED src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey1] 
src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey1] 
[gw8] [ 10%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True] 
[gw3] [ 10%] PASSED src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease1] 
src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease1] 
[gw9] [ 10%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True] 
[gw0] [ 11%] PASSED src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease0] 
src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease0] 
[gw2] [ 11%] PASSED src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease1] 
src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease1] 
[gw8] [ 11%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True] 
[gw6] [ 12%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=16,model=CooleyTukey] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=32,model=CooleyTukey] 
[gw4] [ 12%] PASSED src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey1] 
src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey1] 
[gw5] [ 12%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=16,model=Pease] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=32,model=Pease] 
[gw3] [ 13%] PASSED src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease1] 
src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey1] 
[gw9] [ 13%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True] 
[gw0] [ 13%] PASSED src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease0] 
src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease0] 
[gw7] [ 14%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=128,model=Pease,slow=True] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=64,model=CooleyTukey,slow=True] 
[gw2] [ 14%] PASSED src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease1] 
src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease1] 
[gw4] [ 14%] PASSED src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey1] 
src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey1] 
[gw8] [ 15%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True] 
[gw5] [ 15%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=32,model=Pease] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=32,model=Pease] 
[gw6] [ 15%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=32,model=CooleyTukey] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=32,model=CooleyTukey] 
[gw3] [ 16%] PASSED src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey1] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True] 
[gw0] [ 16%] PASSED src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease0] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True] 
[gw9] [ 16%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True] 
[gw2] [ 16%] PASSED src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease1] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=1,input_num=1,seed=0,slow=True] 
[gw4] [ 17%] PASSED src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey1] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True] 
[gw8] [ 17%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True] 
[gw5] [ 17%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=32,model=Pease] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True] 
[gw7] [ 18%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=64,model=CooleyTukey,slow=True] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=64,model=CooleyTukey,slow=True] 
[gw3] [ 18%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True] 
[gw6] [ 18%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=32,model=CooleyTukey] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=64,model=Pease,slow=True] 
[gw4] [ 19%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True] 
[gw8] [ 19%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True] 
[gw2] [ 19%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True] 
[gw0] [ 20%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True] 
[gw6] [ 20%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=64,model=Pease,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True] 
[gw5] [ 20%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True] 
[gw4] [ 21%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True] 
[gw7] [ 21%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=64,model=CooleyTukey,slow=True] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=128,model=CooleyTukey,slow=True] 
[gw2] [ 21%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True] 
[gw8] [ 22%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True] 
[gw0] [ 22%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True] 
[gw4] [ 22%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True] 
[gw2] [ 23%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True] 
[gw5] [ 23%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True] 
[gw8] [ 23%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True] 
[gw6] [ 24%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True] 
[gw4] [ 24%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True] 
[gw0] [ 24%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=0,slow=True] 
[gw2] [ 25%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True] 
[gw7] [ 25%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(16,8),n_samples=128,model=CooleyTukey,slow=True] 
src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=128,model=CooleyTukey,slow=True] 
[gw8] [ 25%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True] 
[gw5] [ 25%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True] 
[gw0] [ 26%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=0,slow=True] 
[gw4] [ 26%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True] 
[gw2] [ 26%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True] 
[gw8] [ 27%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True] 
[gw4] [ 27%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True] 
[gw5] [ 27%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True] 
[gw0] [ 28%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=1,input_num=1,seed=0,slow=True] 
[gw8] [ 28%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True] 
[gw4] [ 28%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True] 
[gw5] [ 29%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True] 
[gw0] [ 29%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=1,input_num=1,seed=0,slow=True] 
[gw7] [ 29%] PASSED src/fft/tests/fft.py::test_single_freqs[fp_spec=(32,16),n_samples=128,model=CooleyTukey,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True] 
[gw4] [ 30%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True] 
[gw8] [ 30%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True] 
[gw5] [ 30%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True] 
[gw0] [ 31%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=0,slow=True] 
[gw7] [ 31%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True] 
[gw8] [ 31%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True] 
[gw5] [ 32%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True] 
[gw4] [ 32%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True] 
[gw0] [ 32%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=0,slow=True] 
[gw8] [ 33%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True] 
[gw5] [ 33%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True] 
[gw0] [ 33%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=1,input_num=1,seed=0,slow=True] 
[gw8] [ 33%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True] 
[gw5] [ 34%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True] 
[gw4] [ 34%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True] 
[gw0] [ 34%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True] 
[gw8] [ 35%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True] 
[gw5] [ 35%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True] 
[gw8] [ 35%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True] 
[gw4] [ 36%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True] 
[gw5] [ 36%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True] 
[gw8] [ 36%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True] 
[gw4] [ 37%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True] 
[gw5] [ 37%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True] 
[gw8] [ 37%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True] 
[gw9] [ 38%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True] 
[gw1] [ 38%] PASSED src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease0] 
src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease0] 
[gw3] [ 38%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True] 
[gw5] [ 39%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True] 
[gw8] [ 39%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True] 
[gw4] [ 39%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True] 
[gw9] [ 40%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True] 
[gw1] [ 40%] PASSED src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=Pease0] 
src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey0] 
[gw3] [ 40%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True] 
[gw6] [ 41%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True] 
[gw5] [ 41%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True] 
[gw1] [ 41%] PASSED src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey0] 
src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey0] 
[gw1] [ 41%] PASSED src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey0] 
src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey0] 
[gw2] [ 42%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True] 
[gw1] [ 42%] PASSED src/fft/tests/fft.py::test_manual[src_delay=5,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey0] 
src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey0] 
[gw8] [ 42%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True] 
[gw3] [ 43%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True] 
[gw4] [ 43%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True] 
[gw5] [ 43%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True] 
[gw2] [ 44%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True] 
[gw1] [ 44%] PASSED src/fft/tests/fft.py::test_manual[src_delay=0,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey0] 
src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey0] 
[gw8] [ 44%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True] 
[gw3] [ 45%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True] 
[gw2] [ 45%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True] 
[gw1] [ 45%] PASSED src/fft/tests/fft.py::test_manual[src_delay=1,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=[...],outputs=[...],cmp_fn=cmp_exact,model=CooleyTukey0] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True] 
[gw3] [ 46%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True] 
[gw8] [ 46%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True] 
[gw2] [ 46%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True] 
[gw4] [ 47%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True] 
[gw3] [ 47%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True] 
[gw2] [ 47%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True] 
[gw5] [ 48%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True] 
[gw8] [ 48%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True] 
[gw4] [ 48%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True] 
[gw1] [ 49%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True] 
[gw3] [ 49%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True] 
[gw2] [ 49%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True] 
[gw4] [ 50%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True] 
[gw8] [ 50%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True] 
[gw3] [ 50%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True] 
[gw4] [ 50%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True] 
[gw2] [ 51%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True] 
[gw3] [ 51%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True] 
[gw5] [ 51%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True] 
[gw1] [ 52%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True] 
[gw4] [ 52%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True] 
[gw7] [ 52%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True] 
[gw2] [ 53%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True] 
[gw8] [ 53%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True] 
[gw3] [ 53%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True] 
[gw1] [ 54%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True] 
[gw5] [ 54%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True] 
[gw4] [ 54%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True] 
[gw8] [ 55%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True] 
[gw2] [ 55%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True] 
[gw1] [ 55%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True] 
[gw3] [ 56%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True] 
[gw5] [ 56%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True] 
[gw1] [ 56%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True] 
[gw0] [ 57%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True] 
[gw4] [ 57%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True] 
[gw2] [ 57%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True] 
[gw8] [ 58%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True] 
[gw3] [ 58%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True] 
[gw1] [ 58%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True] 
[gw5] [ 58%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True] 
[gw0] [ 59%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True] 
[gw2] [ 59%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True] 
[gw4] [ 59%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True] 
[gw8] [ 60%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True] 
[gw3] [ 60%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True] 
[gw5] [ 60%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True] 
[gw4] [ 61%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True] 
[gw0] [ 61%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True] 
[gw8] [ 61%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True] 
[gw2] [ 62%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True] 
[gw8] [ 62%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True] 
[gw5] [ 62%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True] 
[gw3] [ 63%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True] 
[gw2] [ 63%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True] 
[gw4] [ 63%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True] 
[gw0] [ 64%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True] 
[gw5] [ 64%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True] 
[gw8] [ 64%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True] 
[gw2] [ 65%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True] 
[gw3] [ 65%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True] 
[gw9] [ 65%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True] 
[gw4] [ 66%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True] 
[gw0] [ 66%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True] 
[gw5] [ 66%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True] 
[gw8] [ 66%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True] 
[gw2] [ 67%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True] 
[gw9] [ 67%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True] 
[gw3] [ 67%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True] 
[gw4] [ 68%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True] 
[gw5] [ 68%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=1,slow=True] 
[gw2] [ 68%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=10,input_num=1,seed=1,slow=True] 
[gw9] [ 69%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True] 
[gw6] [ 69%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True] 
[gw3] [ 69%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=1,slow=True] 
[gw0] [ 70%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True] 
[gw8] [ 70%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True] 
[gw4] [ 70%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=10,input_num=1,seed=1,slow=True] 
[gw9] [ 71%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True] 
[gw3] [ 71%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=1,slow=True] 
[gw5] [ 71%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=1,slow=True] 
[gw6] [ 72%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True] 
[gw0] [ 72%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True] 
[gw8] [ 72%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True] 
[gw2] [ 73%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=10,input_num=1,seed=1,slow=True] 
[gw9] [ 73%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True] 
[gw4] [ 73%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=10,input_num=1,seed=1,slow=True] 
[gw3] [ 74%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True] 
[gw5] [ 74%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True] 
[gw6] [ 74%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True] 
[gw0] [ 75%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True] 
[gw8] [ 75%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True] 
[gw2] [ 75%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True] 
[gw4] [ 75%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True] 
[gw5] [ 76%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True] 
[gw3] [ 76%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True] 
[gw9] [ 76%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True] 
[gw0] [ 77%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True] 
[gw6] [ 77%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True] 
[gw2] [ 77%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True] 
[gw8] [ 78%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True] 
[gw4] [ 78%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True] 
[gw5] [ 78%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True] 
[gw3] [ 79%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True] 
[gw0] [ 79%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True] 
[gw9] [ 79%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True] 
[gw6] [ 80%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True] 
[gw4] [ 80%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True] 
[gw1] [ 80%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True] 
[gw7] [ 81%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True] 
[gw5] [ 81%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True] 
[gw2] [ 81%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True] 
[gw8] [ 82%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True] 
[gw3] [ 82%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True] 
[gw0] [ 82%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True] 
[gw9] [ 83%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True] 
[gw1] [ 83%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True] 
[gw5] [ 83%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True] 
[gw6] [ 83%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True] 
[gw4] [ 84%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True] 
[gw3] [ 84%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True] 
[gw7] [ 84%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True] 
[gw2] [ 85%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True] 
[gw9] [ 85%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True] 
[gw8] [ 85%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True] 
[gw0] [ 86%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True] 
[gw4] [ 86%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True] 
[gw5] [ 86%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True] 
[gw7] [ 87%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True] 
[gw6] [ 87%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True] 
[gw9] [ 87%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True] 
[gw8] [ 88%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True] 
[gw3] [ 88%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True] 
[gw1] [ 88%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True] 
[gw6] [ 89%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True] 
[gw2] [ 89%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True] 
[gw5] [ 89%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True] 
[gw9] [ 90%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True] 
[gw0] [ 90%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True] 
[gw7] [ 90%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True] 
[gw3] [ 91%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True] 
[gw8] [ 91%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True] 
[gw1] [ 91%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True] 
[gw6] [ 91%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True] 
[gw9] [ 92%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True] 
[gw2] [ 92%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True] 
[gw0] [ 92%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True] 
[gw5] [ 93%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True] 
[gw3] [ 93%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True] 
[gw7] [ 93%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True] 
[gw1] [ 94%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True] 
[gw9] [ 94%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True] 
[gw8] [ 94%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True] 
[gw6] [ 95%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True] 
[gw0] [ 95%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True] 
[gw7] [ 95%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True] 
[gw2] [ 96%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True] 
[gw5] [ 96%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True] 
[gw3] [ 96%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True] 
[gw1] [ 97%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True] 
[gw8] [ 97%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True] 
[gw0] [ 97%] FAILED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True] 
[gw2] [ 98%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True] 
[gw9] [ 98%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True] 
[gw6] [ 98%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True] 
[gw5] [ 99%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True] 
[gw3] [ 99%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True] 
[gw4] [ 99%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True] 
src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True] 
[gw4] [100%] PASSED src/fft/tests/fft.py::test_model[fp_spec=(32,16),model_spec=(CooleyTukey,FFTCooleyTukey,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True] 

=================================== FAILURES ===================================
_ test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True] _
[gw0] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('Pease', <class 'fft.FFTNumpy'...unction mk_cmp_approx.<locals>.<lambda> at 0x7f62582245e0>), n_samples=32, input_mag=1, input_num=1, seed=0, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 32
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7f6257b927a0>, model = s
inputs = [Bits16(0xff47), Bits16(0xff5c), Bits16(0x0072), Bits16(0xff0a), Bits16(0xff79), Bits16(0x0080), ...]
outputs = [Bits16(0x00c6), Bits16(0x0005), Bits16(0xfcbb), Bits16(0xffe9), Bits16(0x02ab), Bits16(0xfe82), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 0005
E       Received : 0007

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True] _
[gw8] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('Pease', <class 'fft.FFTNumpy'...nction mk_cmp_approx.<locals>.<lambda> at 0x7f07cbf745e0>), n_samples=32, input_mag=10, input_num=1, seed=0, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 32
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7f07cb618fe0>, model = s
inputs = [Bits16(0xf8bf), Bits16(0xf997), Bits16(0x0479), Bits16(0xf662), Bits16(0xfab6), Bits16(0x0503), ...]
outputs = [Bits16(0x07b3), Bits16(0x0049), Bits16(0xdf34), Bits16(0xff0a), Bits16(0x1aab), Bits16(0xf109), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 0049
E       Received : 0050

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True] _
[gw5] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('Pease', <class 'fft.FFTNumpy'...nction mk_cmp_approx.<locals>.<lambda> at 0x7fc35b1545e0>), n_samples=64, input_mag=10, input_num=1, seed=0, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 64
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7fc35acff240>, model = s
inputs = [Bits16(0xf8bf), Bits16(0xf997), Bits16(0x0479), Bits16(0xf662), Bits16(0xfab6), Bits16(0x0503), ...]
outputs = [Bits16(0x0d75), Bits16(0xb8fa), Bits16(0x159b), Bits16(0xd489), Bits16(0xcd0e), Bits16(0x5408), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 00af
E       Received : 00a6

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True] _
[gw8] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('CooleyTukey', <class 'fft.FFT...nction mk_cmp_approx.<locals>.<lambda> at 0x7f07cbf74540>), n_samples=64, input_mag=10, input_num=1, seed=0, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 64
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7f07cb8c0e00>, model = s
inputs = [Bits16(0xf8bf), Bits16(0xf997), Bits16(0x0479), Bits16(0xf662), Bits16(0xfab6), Bits16(0x0503), ...]
outputs = [Bits16(0x0d75), Bits16(0xb8fa), Bits16(0x159b), Bits16(0xd489), Bits16(0xcd0e), Bits16(0x5408), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 00af
E       Received : 00a6

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=1,seed=0,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True] _
[gw4] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('CooleyTukey', <class 'fft.FFT...nction mk_cmp_approx.<locals>.<lambda> at 0x7f78a1398540>), n_samples=32, input_mag=10, input_num=1, seed=0, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 32
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7f78a0d8d3a0>, model = s
inputs = [Bits16(0xf8bf), Bits16(0xf997), Bits16(0x0479), Bits16(0xf662), Bits16(0xfab6), Bits16(0x0503), ...]
outputs = [Bits16(0x07b3), Bits16(0x0049), Bits16(0xdf34), Bits16(0xff0a), Bits16(0x1aab), Bits16(0xf109), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 0049
E       Received : 0050

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True] _
[gw4] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('Pease', <class 'fft.FFTNumpy'...nction mk_cmp_approx.<locals>.<lambda> at 0x7f78a13985e0>), n_samples=64, input_mag=1, input_num=10, seed=0, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 64
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7f78a0bf71a0>, model = s
inputs = [Bits16(0xff47), Bits16(0xff5c), Bits16(0x0072), Bits16(0xff0a), Bits16(0xff79), Bits16(0x0080), ...]
outputs = [Bits16(0x015a), Bits16(0xf8e9), Bits16(0x0226), Bits16(0xfba9), Bits16(0xfaef), Bits16(0x0861), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : fff2
E       Received : ffef

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True] _
[gw3] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('CooleyTukey', <class 'fft.FFT...unction mk_cmp_approx.<locals>.<lambda> at 0x7fa750eb8540>), n_samples=32, input_mag=1, input_num=1, seed=0, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 32
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7fa75094fec0>, model = s
inputs = [Bits16(0xff47), Bits16(0xff5c), Bits16(0x0072), Bits16(0xff0a), Bits16(0xff79), Bits16(0x0080), ...]
outputs = [Bits16(0x00c6), Bits16(0x0005), Bits16(0xfcbb), Bits16(0xffe9), Bits16(0x02ab), Bits16(0xfe82), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 0005
E       Received : 0007

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True] _
[gw5] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('CooleyTukey', <class 'fft.FFT...ction mk_cmp_approx.<locals>.<lambda> at 0x7fc35b154540>), n_samples=64, input_mag=10, input_num=10, seed=0, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 64
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7fc35a566d40>, model = s
inputs = [Bits16(0xf8bf), Bits16(0xf997), Bits16(0x0479), Bits16(0xf662), Bits16(0xfab6), Bits16(0x0503), ...]
outputs = [Bits16(0x0d75), Bits16(0xb8fa), Bits16(0x159b), Bits16(0xd489), Bits16(0xcd0e), Bits16(0x5408), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 00af
E       Received : 00a6

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True] _
[gw8] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('Pease', <class 'fft.FFTNumpy'...ction mk_cmp_approx.<locals>.<lambda> at 0x7f07cbf745e0>), n_samples=32, input_mag=10, input_num=10, seed=0, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 32
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7f07cb337420>, model = s
inputs = [Bits16(0xf8bf), Bits16(0xf997), Bits16(0x0479), Bits16(0xf662), Bits16(0xfab6), Bits16(0x0503), ...]
outputs = [Bits16(0x07b3), Bits16(0x0049), Bits16(0xdf34), Bits16(0xff0a), Bits16(0x1aab), Bits16(0xf109), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 0049
E       Received : 0050

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True] _
[gw5] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('Pease', <class 'fft.FFTNumpy'...ction mk_cmp_approx.<locals>.<lambda> at 0x7fc35b1545e0>), n_samples=64, input_mag=10, input_num=10, seed=0, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 64
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7fc35aa576a0>, model = s
inputs = [Bits16(0xf8bf), Bits16(0xf997), Bits16(0x0479), Bits16(0xf662), Bits16(0xfab6), Bits16(0x0503), ...]
outputs = [Bits16(0x0d75), Bits16(0xb8fa), Bits16(0x159b), Bits16(0xd489), Bits16(0xcd0e), Bits16(0x5408), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 00af
E       Received : 00a6

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=0,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True] _
[gw3] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('CooleyTukey', <class 'fft.FFT...unction mk_cmp_approx.<locals>.<lambda> at 0x7fa750eb8540>), n_samples=64, input_mag=1, input_num=1, seed=1, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 64
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7fa75084f100>, model = s
inputs = [Bits16(0xffb0), Bits16(0xff33), Bits16(0x00c4), Bits16(0x0056), Bits16(0x00e6), Bits16(0x0007), ...]
outputs = [Bits16(0xf5f5), Bits16(0x05fc), Bits16(0xfc16), Bits16(0x006b), Bits16(0xf8f8), Bits16(0x0258), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 006b
E       Received : 0071

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True] _
[gw5] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('Pease', <class 'fft.FFTNumpy'...unction mk_cmp_approx.<locals>.<lambda> at 0x7fc35b1545e0>), n_samples=64, input_mag=1, input_num=1, seed=1, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 64
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7fc35acfe160>, model = s
inputs = [Bits16(0xffb0), Bits16(0xff33), Bits16(0x00c4), Bits16(0x0056), Bits16(0x00e6), Bits16(0x0007), ...]
outputs = [Bits16(0xf5f5), Bits16(0x05fc), Bits16(0xfc16), Bits16(0x006b), Bits16(0xf8f8), Bits16(0x0258), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 006b
E       Received : 0071

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=1,seed=1,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True] _
[gw0] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('CooleyTukey', <class 'fft.FFT...ction mk_cmp_approx.<locals>.<lambda> at 0x7f6258224540>), n_samples=32, input_mag=10, input_num=10, seed=0, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 32
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7f6257a29ee0>, model = s
inputs = [Bits16(0xf8bf), Bits16(0xf997), Bits16(0x0479), Bits16(0xf662), Bits16(0xfab6), Bits16(0x0503), ...]
outputs = [Bits16(0x07b3), Bits16(0x0049), Bits16(0xdf34), Bits16(0xff0a), Bits16(0x1aab), Bits16(0xf109), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 0049
E       Received : 0050

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True] _
[gw6] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('Pease', <class 'fft.FFTNumpy'...nction mk_cmp_approx.<locals>.<lambda> at 0x7f581bbec5e0>), n_samples=16, input_mag=1, input_num=10, seed=0, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 16
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7f581b66f740>, model = s
inputs = [Bits16(0xff47), Bits16(0xff5c), Bits16(0x0072), Bits16(0xff0a), Bits16(0xff79), Bits16(0x0080), ...]
outputs = [Bits16(0xfdcd), Bits16(0xfe66), Bits16(0xff7a), Bits16(0x0094), Bits16(0xfd35), Bits16(0xfef4), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : ffef
E       Received : ffee

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True] _
[gw9] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('CooleyTukey', <class 'fft.FFT...nction mk_cmp_approx.<locals>.<lambda> at 0x7fbeecd98540>), n_samples=16, input_mag=1, input_num=10, seed=0, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 16
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7fbeec671620>, model = s
inputs = [Bits16(0xff47), Bits16(0xff5c), Bits16(0x0072), Bits16(0xff0a), Bits16(0xff79), Bits16(0x0080), ...]
outputs = [Bits16(0xfdcd), Bits16(0xfe66), Bits16(0xff7a), Bits16(0x0094), Bits16(0xfd35), Bits16(0xfef4), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : ffef
E       Received : ffee

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True] _
[gw0] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('CooleyTukey', <class 'fft.FFT...nction mk_cmp_approx.<locals>.<lambda> at 0x7f6258224540>), n_samples=16, input_mag=1, input_num=10, seed=1, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 16
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7f6257b3a020>, model = s
inputs = [Bits16(0xffb0), Bits16(0xff33), Bits16(0x00c4), Bits16(0x0056), Bits16(0x00e6), Bits16(0x0007), ...]
outputs = [Bits16(0x0075), Bits16(0xff04), Bits16(0xff26), Bits16(0xfbf9), Bits16(0xfff2), Bits16(0xff65), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 000a
E       Received : 000b

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True] _
[gw6] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('CooleyTukey', <class 'fft.FFT...nction mk_cmp_approx.<locals>.<lambda> at 0x7f581bbec540>), n_samples=32, input_mag=1, input_num=10, seed=0, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 32
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7f581b8602c0>, model = s
inputs = [Bits16(0xff47), Bits16(0xff5c), Bits16(0x0072), Bits16(0xff0a), Bits16(0xff79), Bits16(0x0080), ...]
outputs = [Bits16(0x00c6), Bits16(0x0005), Bits16(0xfcbb), Bits16(0xffe9), Bits16(0x02ab), Bits16(0xfe82), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 0005
E       Received : 0007

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True] _
[gw7] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('Pease', <class 'fft.FFTNumpy'...nction mk_cmp_approx.<locals>.<lambda> at 0x7fd550ab45e0>), n_samples=32, input_mag=1, input_num=10, seed=0, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 32
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7fd54fd19260>, model = s
inputs = [Bits16(0xff47), Bits16(0xff5c), Bits16(0x0072), Bits16(0xff0a), Bits16(0xff79), Bits16(0x0080), ...]
outputs = [Bits16(0x00c6), Bits16(0x0005), Bits16(0xfcbb), Bits16(0xffe9), Bits16(0x02ab), Bits16(0xfe82), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 0005
E       Received : 0007

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True] _
[gw5] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('Pease', <class 'fft.FFTNumpy'...nction mk_cmp_approx.<locals>.<lambda> at 0x7fc35b1545e0>), n_samples=16, input_mag=1, input_num=10, seed=1, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 16
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7fc35a8a4180>, model = s
inputs = [Bits16(0xffb0), Bits16(0xff33), Bits16(0x00c4), Bits16(0x0056), Bits16(0x00e6), Bits16(0x0007), ...]
outputs = [Bits16(0x0075), Bits16(0xff04), Bits16(0xff26), Bits16(0xfbf9), Bits16(0xfff2), Bits16(0xff65), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 000a
E       Received : 000b

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True] _
[gw3] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('Pease', <class 'fft.FFTNumpy'...nction mk_cmp_approx.<locals>.<lambda> at 0x7fa750eb85e0>), n_samples=32, input_mag=1, input_num=10, seed=1, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 32
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7fa750c04720>, model = s
inputs = [Bits16(0xffb0), Bits16(0xff33), Bits16(0x00c4), Bits16(0x0056), Bits16(0x00e6), Bits16(0x0007), ...]
outputs = [Bits16(0xfd41), Bits16(0xfe76), Bits16(0xfe8c), Bits16(0xffb7), Bits16(0x0069), Bits16(0x01c2), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : fff7
E       Received : fff9

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True] _
[gw2] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('CooleyTukey', <class 'fft.FFT...nction mk_cmp_approx.<locals>.<lambda> at 0x7f020c770540>), n_samples=32, input_mag=1, input_num=10, seed=1, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 32
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7f020bde7740>, model = s
inputs = [Bits16(0xffb0), Bits16(0xff33), Bits16(0x00c4), Bits16(0x0056), Bits16(0x00e6), Bits16(0x0007), ...]
outputs = [Bits16(0xfd41), Bits16(0xfe76), Bits16(0xfe8c), Bits16(0xffb7), Bits16(0x0069), Bits16(0x01c2), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : fff7
E       Received : fff9

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True] _
[gw4] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('CooleyTukey', <class 'fft.FFT...nction mk_cmp_approx.<locals>.<lambda> at 0x7f78a1398540>), n_samples=64, input_mag=1, input_num=10, seed=1, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 64
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7f78a09d4b80>, model = s
inputs = [Bits16(0xffb0), Bits16(0xff33), Bits16(0x00c4), Bits16(0x0056), Bits16(0x00e6), Bits16(0x0007), ...]
outputs = [Bits16(0xf5f5), Bits16(0x05fc), Bits16(0xfc16), Bits16(0x006b), Bits16(0xf8f8), Bits16(0x0258), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 006b
E       Received : 0071

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True] _
[gw8] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('Pease', <class 'fft.FFTNumpy'...nction mk_cmp_approx.<locals>.<lambda> at 0x7f07cbf745e0>), n_samples=64, input_mag=1, input_num=10, seed=1, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 64
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7f07cb4d9da0>, model = s
inputs = [Bits16(0xffb0), Bits16(0xff33), Bits16(0x00c4), Bits16(0x0056), Bits16(0x00e6), Bits16(0x0007), ...]
outputs = [Bits16(0xf5f5), Bits16(0x05fc), Bits16(0xfc16), Bits16(0x006b), Bits16(0xf8f8), Bits16(0x0258), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 006b
E       Received : 0071

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=1,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True] _
[gw7] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('CooleyTukey', <class 'fft.FFT...nction mk_cmp_approx.<locals>.<lambda> at 0x7fd550ab4540>), n_samples=64, input_mag=1, input_num=10, seed=0, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 64
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7fd550295940>, model = s
inputs = [Bits16(0xff47), Bits16(0xff5c), Bits16(0x0072), Bits16(0xff0a), Bits16(0xff79), Bits16(0x0080), ...]
outputs = [Bits16(0x015a), Bits16(0xf8e9), Bits16(0x0226), Bits16(0xfba9), Bits16(0xfaef), Bits16(0x0861), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : fff2
E       Received : ffef

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=1,input_num=10,seed=0,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True] _
[gw6] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('CooleyTukey', <class 'fft.FFT...ction mk_cmp_approx.<locals>.<lambda> at 0x7f581bbec540>), n_samples=32, input_mag=10, input_num=10, seed=1, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 32
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7f581b2337e0>, model = s
inputs = [Bits16(0xfcdc), Bits16(0xf7fd), Bits16(0x07b1), Bits16(0x035f), Bits16(0x08fe), Bits16(0x004a), ...]
outputs = [Bits16(0xe486), Bits16(0xf08c), Bits16(0xf16e), Bits16(0xfd0e), Bits16(0x0421), Bits16(0x11bb), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : ffa7
E       Received : ffad

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True] _
[gw0] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('Pease', <class 'fft.FFTNumpy'...ction mk_cmp_approx.<locals>.<lambda> at 0x7f62582245e0>), n_samples=32, input_mag=10, input_num=10, seed=1, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 32
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7f6257756d40>, model = s
inputs = [Bits16(0xfcdc), Bits16(0xf7fd), Bits16(0x07b1), Bits16(0x035f), Bits16(0x08fe), Bits16(0x004a), ...]
outputs = [Bits16(0xe486), Bits16(0xf08c), Bits16(0xf16e), Bits16(0xfd0e), Bits16(0x0421), Bits16(0x11bb), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : ffa7
E       Received : ffad

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True] _
[gw1] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('CooleyTukey', <class 'fft.FFT...ction mk_cmp_approx.<locals>.<lambda> at 0x7fe822b30540>), n_samples=64, input_mag=10, input_num=10, seed=1, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 64
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7fe8221549a0>, model = s
inputs = [Bits16(0xfcdc), Bits16(0xf7fd), Bits16(0x07b1), Bits16(0x035f), Bits16(0x08fe), Bits16(0x004a), ...]
outputs = [Bits16(0x9b52), Bits16(0x3c19), Bits16(0xd8ca), Bits16(0x042c), Bits16(0xb984), Bits16(0x176e), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 0133
E       Received : 0145

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(CooleyTukey,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True]====================
_ test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True] _
[gw0] linux -- Python 3.11.5 /classes/c2s2/easybuild/software/Python/3.11.5-GCCcore-13.2.0/bin/python

cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
p = fp_spec_model_spec_n_samples_input_mag_input_num_seed_slow(fp_spec=(16, 8), model_spec=('Pease', <class 'fft.FFTNumpy'...ction mk_cmp_approx.<locals>.<lambda> at 0x7f62582245e0>), n_samples=64, input_mag=10, input_num=10, seed=1, slow=True)

    @pytest.mark.parametrize(
        *mk_test_matrices(
            {
                "fp_spec": [(32, 16), (16, 8)],
                "model_spec": sum(
                    [
                        [
                            (
                                hard,  # Hardware model
                                FFTNumpy,  # Model (must implement FFTInterface)
                                mk_cmp_approx(
                                    0.05
                                ),  # Comparison function (expecting an accuracy of ~5% here)
                            ),
                            (
                                hard,
                                soft,  # Model (must implement FFTInterface)
                                cmp_exact,
                            ),
                        ]
                        for (hard, soft) in [
                            (
                                "CooleyTukey",
                                FFTCooleyTukey,
                            ),
                            ("Pease", FFTPease),
                        ]
                    ],
                    [],
                ),
                "n_samples": [8, 16, 32, 64],
                "input_mag": [1, 10],  # Maximum magnitude of the input signal
                "input_num": [1, 10],  # Number of random inputs to generate
                "seed": list(range(2)),  # Random seed
                "slow": True,
            }
        )
    )
    def test_model(cmdline_opts, p):
        random.seed(
            random.random() + p.seed
        )  # Done so each test has a deterministic but different random seed
    
        # Test the FFT implementation with a specified model
    
        # Create the model
        hard, soft, cmp = p.model_spec
        model: FFTInterface = soft(p.fp_spec[0], p.fp_spec[1], p.n_samples)
    
        # Generate random inputs
        inputs = [
            [
                CFixed((random.uniform(-p.input_mag, p.input_mag), 0), *p.fp_spec)
                for i in range(p.n_samples)
            ]
            for _ in range(p.input_num)
        ]
    
        # Generate the expected outputs
        outputs = [model.transform(x) for x in inputs]
        # Convert to Fixed by keeping only the real part
        inputs = [[x.real for x in sample] for sample in inputs]
        outputs = [[x.real for x in sample] for sample in outputs]
    
        def test(x: Bits, y: Bits):
            return cmp(x, y)
    
        # Run the test
>       check_fft(
            p.fp_spec[0],
            p.fp_spec[1],
            p.n_samples,
            cmdline_opts,
            src_delay=0,
            sink_delay=0,
            comparison_fn=test,
            model=hard,
            inputs=inputs,
            outputs=outputs,
        )

/home/el595/c2s2_ip/src/fft/tests/fft.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

bit_width = 16, decimal_pt = 8, n_samples = 64
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
src_delay = 0, sink_delay = 0
comparison_fn = <function test_model.<locals>.test at 0x7f62577568e0>, model = s
inputs = [Bits16(0xfcdc), Bits16(0xf7fd), Bits16(0x07b1), Bits16(0x035f), Bits16(0x08fe), Bits16(0x004a), ...]
outputs = [Bits16(0x9b52), Bits16(0x3c19), Bits16(0xd8ca), Bits16(0x042c), Bits16(0xb984), Bits16(0x176e), ...]

    def check_fft(
        bit_width: int,
        decimal_pt: int,
        n_samples: int,
        cmdline_opts: dict,
        src_delay: int,
        sink_delay: int,
        comparison_fn: callable,
        model: Component,
        inputs: list[list[Fixed]],
        outputs: list[list[Fixed]],
    ) -> None:
        """
        Check the FFT implementation.
    
        Args:
            bit_width (int): Number of bits.
            decimal_pt (int): Number of decimal points.
            n_samples (int): Number of samples.
            cmdline_opts (dict): Command line options.
            src_delay (int): Source delay.
            sink_delay (int): Sink delay.
            comparison_fn (callable): Comparison function.
            model (Component): Hardware FFT model to test.
            inputs (list[list[Fixed]]): List of inputs (only contains the real part of the complex input).
            outputs (list[list[Fixed]]): List of expected outputs (only contains the real part of the complex output).
    
        Returns:
            bool: True if the test passes, False otherwise.
        """
        assert len(inputs) == len(outputs)
        assert all(len(x) == n_samples for x in inputs)
        assert all(len(x) == n_samples for x in outputs)
    
        model = TestHarness(bit_width, decimal_pt, n_samples, comparison_fn, model)
    
        # Convert inputs and outputs into a single list of bits
        inputs = [fixed_bits(x) for sample in inputs for x in sample]
        outputs = [fixed_bits(x) for sample in outputs for x in sample]
    
        # Run the model
        model.set_param(
            "top.src.construct",
            msgs=inputs,
            initial_delay=src_delay + 3,
            interval_delay=src_delay,
        )
    
        model.set_param(
            "top.sink.construct",
            msgs=outputs,
            initial_delay=sink_delay + 3,
            interval_delay=sink_delay,
        )
    
>       run_sim(model, cmdline_opts, duts=["dut"], print_line_trace=False)

/home/el595/c2s2_ip/src/fft/tests/fft.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

model = s
cmdline_opts = {'dump_textwave': False, 'dump_vcd': '', 'dump_vtb': 'test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True', 'max_cycles': None, ...}
print_line_trace = False, duts = ['dut']

    def run_sim( model, cmdline_opts=None, print_line_trace=True, duts=None ):
    
      cmdline_opts = cmdline_opts or {'dump_textwave'      : False,
                                      'dump_vcd'           : False,
                                      'test_verilog'       : False,
                                      'test_yosys_verilog' : False,
                                      'max_cycles'         : None,
                                      'dump_vtb'           : ''}
    
      max_cycles = cmdline_opts['max_cycles'] or 10000
    
      # Setup the model
    
      model = config_model_with_cmdline_opts( model, cmdline_opts, duts )
    
      try:
        # Create a simulator
        model.apply( DefaultPassGroup(linetrace=print_line_trace) )
        # Reset model
        model.sim_reset()
    
        # Run simulation
        while not model.done() and model.sim_cycle_count() < max_cycles:
>         model.sim_tick()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/test_utils/test_helpers.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def iterative():
      for blk in schedule:
>       blk()

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/passes/sim/SimpleTickPass.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @update_ff
    def up_sink():
      # Raise exception at the start of next cycle so that the errored
      # line trace gets printed out
      if s.error_msg:
>       raise PyMTLTestSinkError( s.error_msg )
E       pymtl3.stdlib.stream.SinkRTL.PyMTLTestSinkError: Test sink s.sink received WRONG message!
E       Expected : 0133
E       Received : 0145

/classes/c2s2/easybuild/software/C2S2PythonPackages/2024.02-foss-2023b/lib/python3.11/site-packages/pymtl3/stdlib/stream/SinkRTL.py:55: PyMTLTestSinkError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:94 ====================src/fft/tests/fft.py::test_model[fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=64,input_mag=10,input_num=10,seed=1,slow=True]====================
======================= 28 failed, 284 passed in 20.09s ========================
INFO: Finished running pytest
INFO: Collecting design files
DEBUG: Searching for designs matching {'PeaseFFTWrapper__N_SAMPLES_8__DECIMAL_PT_16__BIT_WIDTH_32', 'PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16', 'PeaseFFTWrapper__DECIMAL_PT_8__BIT_WIDTH_16__N_SAMPLES_16', 'PeaseFFTWrapper__DECIMAL_PT_8__BIT_WIDTH_16__N_SAMPLES_32', 'PeaseFFTWrapper__N_SAMPLES_32__DECIMAL_PT_8__BIT_WIDTH_16', 'PeaseFFTWrapper__N_SAMPLES_8__BIT_WIDTH_32__DECIMAL_PT_16', 'PeaseFFTWrapper__BIT_WIDTH_32__N_SAMPLES_16__DECIMAL_PT_16', 'PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32', 'PeaseFFTWrapper__BIT_WIDTH_16__N_SAMPLES_8__DECIMAL_PT_8', 'PeaseFFTWrapper__BIT_WIDTH_32__N_SAMPLES_8__DECIMAL_PT_16', 'PeaseFFTWrapper__N_SAMPLES_16__BIT_WIDTH_32__DECIMAL_PT_16', 'PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16', 'PeaseFFTWrapper__DECIMAL_PT_8__N_SAMPLES_32__BIT_WIDTH_16', 'PeaseFFTWrapper__DECIMAL_PT_8__N_SAMPLES_8__BIT_WIDTH_16', 'PeaseFFTWrapper__DECIMAL_PT_16__BIT_WIDTH_32__N_SAMPLES_8', 'PeaseFFTWrapper__N_SAMPLES_16__DECIMAL_PT_16__BIT_WIDTH_32', 'PeaseFFTWrapper__DECIMAL_PT_16__N_SAMPLES_16__BIT_WIDTH_32', 'PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8', 'PeaseFFTWrapper__N_SAMPLES_16__BIT_WIDTH_16__DECIMAL_PT_8', 'PeaseFFTWrapper__DECIMAL_PT_8__N_SAMPLES_16__BIT_WIDTH_16', 'PeaseFFTWrapper__DECIMAL_PT_8__BIT_WIDTH_16__N_SAMPLES_8', 'PeaseFFTWrapper__N_SAMPLES_8__DECIMAL_PT_8__BIT_WIDTH_16', 'PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8', 'PeaseFFTWrapper__N_SAMPLES_32__BIT_WIDTH_16__DECIMAL_PT_8', 'PeaseFFTWrapper__DECIMAL_PT_16__N_SAMPLES_8__BIT_WIDTH_32', 'PeaseFFTWrapper__BIT_WIDTH_16__N_SAMPLES_32__DECIMAL_PT_8', 'PeaseFFTWrapper__N_SAMPLES_16__DECIMAL_PT_8__BIT_WIDTH_16', 'PeaseFFTWrapper__N_SAMPLES_8__BIT_WIDTH_16__DECIMAL_PT_8', 'PeaseFFTWrapper__DECIMAL_PT_16__BIT_WIDTH_32__N_SAMPLES_16', 'PeaseFFTWrapper__BIT_WIDTH_16__N_SAMPLES_16__DECIMAL_PT_8'}
WARNING: Found multiple verilog files for PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32:
	/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32__pickled.v
	/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32__pickled.v
	/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32__pickled.v
	/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32__pickled.v
	/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32__pickled.v
	/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32__pickled.v
	/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32__pickled.v
	/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32__pickled.v
	/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32__pickled.v
	/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32__pickled.v
Using the last modified file /home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32__pickled.v
WARNING: Found multiple verilog files for PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8:
	/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8__pickled.v
	/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8__pickled.v
	/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8__pickled.v
	/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8__pickled.v
	/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8__pickled.v
	/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8__pickled.v
	/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8__pickled.v
	/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8__pickled.v
	/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8__pickled.v
Using the last modified file /home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8__pickled.v
WARNING: Found multiple verilog files for PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16:
	/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16__pickled.v
	/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16__pickled.v
	/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16__pickled.v
	/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16__pickled.v
	/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16__pickled.v
	/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16__pickled.v
	/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16__pickled.v
	/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16__pickled.v
	/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16__pickled.v
	/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16__pickled.v
Using the last modified file /home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16__pickled.v
WARNING: Found multiple verilog files for PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16:
	/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16__pickled.v
	/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16__pickled.v
	/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16__pickled.v
	/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16__pickled.v
	/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16__pickled.v
	/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16__pickled.v
	/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16__pickled.v
	/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16__pickled.v
	/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16__pickled.v
	/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16__pickled.v
Using the last modified file /home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16__pickled.v
WARNING: Found multiple verilog files for PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8:
	/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8__pickled.v
	/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8__pickled.v
	/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8__pickled.v
	/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8__pickled.v
	/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8__pickled.v
	/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8__pickled.v
	/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8__pickled.v
	/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8__pickled.v
	/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8__pickled.v
Using the last modified file /home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8__pickled.v
DEBUG: Collected verilog files {'PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32': '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32__pickled.v', 'PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8': '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8__pickled.v', 'PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16': '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16__pickled.v', 'PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16': '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16__pickled.v', 'PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8': '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8__pickled.v'}
DEBUG: Collected vtb files {'PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32': ['/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_single_freqs_fp_spec=(16,8),n_samples=32,model=Pease_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases'], 'PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8': ['/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=0,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease0_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=1,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease0_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=5,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease0_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=0,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease0_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=1,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease0_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=5,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease0_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=0,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease0_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=0,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=1,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=5,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=0,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=1,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=5,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=0,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=1,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=5,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=0,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=1,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=5,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=0,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=1,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=5,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=0,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=1,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=5,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=1,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease0_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=5,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease0_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_single_freqs_fp_spec=(16,8),n_samples=8,model=Pease_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases'], 'PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16': ['/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_single_freqs_fp_spec=(32,16),n_samples=16,model=Pease_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases'], 'PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16': ['/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_single_freqs_fp_spec=(16,8),n_samples=16,model=Pease_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases'], 'PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8': ['/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_single_freqs_fp_spec=(32,16),n_samples=8,model=Pease_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases', '/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases']}
INFO: Finished collecting design files
DEBUG: Synthesizing designs
[
  {
    "TEST_FILES": [
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=0,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease0_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=1,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease0_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=5,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease0_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=0,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease0_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=1,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease0_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=5,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease0_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=0,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease0_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=0,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=1,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=5,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=0,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=1,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=5,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=0,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=1,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=5,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=0,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=1,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=5,sink_delay=0,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=0,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=1,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=5,sink_delay=1,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=0,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=1,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=5,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease1_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=1,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease0_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_manual_src_delay=5,sink_delay=5,bit_width=16,decimal_pt=8,n_samples=8,inputs=_...,outputs=_...,cmp_fn=cmp_exact,model=Pease0_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_single_freqs_fp_spec=(16,8),n_samples=8,model=Pease_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases"
    ],
    "DESIGN_NAME": "PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8",
    "FP_PIN_ORDER_CFG": "../fft_pins.cfg",
    "PARAMS": {
      "DESIGN_IS_CORE": 0,
      "FP_SIZING": "absolute",
      "CLOCK_PORT": "clk",
      "DIE_AREA": "0 0 400 400",
      "PL_TARGET_DENSITY": 0.8,
      "CLOCK_PERIOD": 20
    },
    "VERILOG_FILE": "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8__pickled.v"
  },
  {
    "TEST_FILES": [
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_single_freqs_fp_spec=(16,8),n_samples=16,model=Pease_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases"
    ],
    "DESIGN_NAME": "PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16",
    "FP_PIN_ORDER_CFG": "../fft_pins.cfg",
    "PARAMS": {
      "DESIGN_IS_CORE": 0,
      "FP_SIZING": "absolute",
      "CLOCK_PORT": "clk",
      "DIE_AREA": "0 0 800 800",
      "PL_TARGET_DENSITY": 0.8,
      "CLOCK_PERIOD": 20
    },
    "VERILOG_FILE": "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16__pickled.v"
  },
  {
    "TEST_FILES": [
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_single_freqs_fp_spec=(16,8),n_samples=32,model=Pease_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_test_model_fp_spec=(16,8),model_spec=(Pease,FFTPease,cmp_exact),n_samples=32,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases"
    ],
    "DESIGN_NAME": "PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32",
    "FP_PIN_ORDER_CFG": "../fft_pins.cfg",
    "PARAMS": {
      "DESIGN_IS_CORE": 0,
      "FP_SIZING": "absolute",
      "CLOCK_PORT": "clk",
      "DIE_AREA": "0 0 1600 1600",
      "PL_TARGET_DENSITY": 0.8,
      "CLOCK_PERIOD": 20
    },
    "VERILOG_FILE": "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32__pickled.v"
  },
  {
    "TEST_FILES": [
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_single_freqs_fp_spec=(32,16),n_samples=8,model=Pease_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=8,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=8,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases"
    ],
    "DESIGN_NAME": "PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8",
    "FP_PIN_ORDER_CFG": "../fft_pins.cfg",
    "PARAMS": {
      "DESIGN_IS_CORE": 0,
      "FP_SIZING": "absolute",
      "CLOCK_PORT": "clk",
      "DIE_AREA": "0 0 800 800",
      "PL_TARGET_DENSITY": 0.8,
      "CLOCK_PERIOD": 20
    },
    "VERILOG_FILE": "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8__pickled.v"
  },
  {
    "TEST_FILES": [
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw9/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw0/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw6/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw4/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw1/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_single_freqs_fp_spec=(32,16),n_samples=16,model=Pease_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw5/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=1,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=10,input_num=10,seed=0,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTPease,cmp_exact),n_samples=16,input_mag=1,input_num=1,seed=1,slow=True_tb.v.cases",
      "/home/el595/c2s2_ip/build/gw7/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_test_model_fp_spec=(32,16),model_spec=(Pease,FFTNumpy,<lambda>),n_samples=16,input_mag=10,input_num=10,seed=1,slow=True_tb.v.cases"
    ],
    "DESIGN_NAME": "PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16",
    "FP_PIN_ORDER_CFG": "../fft_pins.cfg",
    "PARAMS": {
      "DESIGN_IS_CORE": 0,
      "FP_SIZING": "absolute",
      "CLOCK_PORT": "clk",
      "DIE_AREA": "0 0 1600 1600",
      "PL_TARGET_DENSITY": 0.8,
      "CLOCK_PERIOD": 20
    },
    "VERILOG_FILE": "/home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16__pickled.v"
  }
]
DEBUG: Adding path prefix fft_pease to designs
INFO: Copying files to caravel
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Copying /home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8__pickled.v to /scratch/caravel/el595/verilog/rtl/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8.sv
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Copying /home/el595/c2s2_ip/build/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8_config.json to /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/config.json
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Copying /home/el595/c2s2_ip/src/fft/pease/../fft_pins.cfg to /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/pin_order.cfg
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Copying /home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16__pickled.v to /scratch/caravel/el595/verilog/rtl/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16.sv
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Copying /home/el595/c2s2_ip/build/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16_config.json to /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/config.json
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Copying /home/el595/c2s2_ip/src/fft/pease/../fft_pins.cfg to /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/pin_order.cfg
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Copying /home/el595/c2s2_ip/build/gw3/PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32__pickled.v to /scratch/caravel/el595/verilog/rtl/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32.sv
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Copying /home/el595/c2s2_ip/build/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32_config.json to /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/config.json
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Copying /home/el595/c2s2_ip/src/fft/pease/../fft_pins.cfg to /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/pin_order.cfg
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Copying /home/el595/c2s2_ip/build/gw2/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8__pickled.v to /scratch/caravel/el595/verilog/rtl/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8.sv
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Copying /home/el595/c2s2_ip/build/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8_config.json to /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/config.json
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Copying /home/el595/c2s2_ip/src/fft/pease/../fft_pins.cfg to /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/pin_order.cfg
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Copying /home/el595/c2s2_ip/build/gw8/PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16__pickled.v to /scratch/caravel/el595/verilog/rtl/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16.sv
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Copying /home/el595/c2s2_ip/build/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16_config.json to /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/config.json
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
DEBUG: Copying /home/el595/c2s2_ip/src/fft/pease/../fft_pins.cfg to /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/pin_order.cfg
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
INFO: Finished copying files to caravel
INFO: Running synthesis with 10 threads
INFOINFO: Running synthesis on PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32
: Running synthesis on PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8
INFO: Running synthesis on PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16
INFO: Running synthesis on PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8
INFODEBUG: Running synthesis on PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16
: Didn't see any /etc/invoke.yaml, skipping.
DEBUGDEBUG: Didn't see any /etc/invoke.yaml, skipping.
DEBUGDEBUGDEBUG: Didn't see any /etc/invoke.yml, skipping.
: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.yaml, skipping.
: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUG: Merging config sources in order onto new empty _config...
DEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUG: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUG: Environment variable config: {}
DEBUG: Runtime config file has not been loaded yet, skipping
DEBUG: Overrides: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
: Didn't see any /etc/invoke.yaml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUGDEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.yml, skipping.
DEBUG: Didn't see any /etc/invoke.json, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
: Didn't see any /etc/invoke.yml, skipping.
DEBUGDEBUG: Didn't see any /home/el595/.invoke.yaml, skipping.
: Didn't see any /etc/invoke.json, skipping.
DEBUGDEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
: Didn't see any /etc/invoke.json, skipping.
DEBUGDEBUGDEBUGDEBUG: Didn't see any /home/el595/.invoke.json, skipping.
: Didn't see any /home/el595/.invoke.yaml, skipping.
: Didn't see any /home/el595/.invoke.json, skipping.
: Didn't see any /home/el595/.invoke.yaml, skipping.
DEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUGDEBUG: Didn't see any /home/el595/.invoke.yml, skipping.
DEBUGDEBUG: Didn't see any /home/el595/.invoke.json, skipping.
: Merging config sources in order onto new empty _config...
: Merging config sources in order onto new empty _config...
DEBUGDEBUG: Merging config sources in order onto new empty _config...
DEBUGDEBUG: Didn't see any /home/el595/.invoke.json, skipping.
DEBUGDEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
: Merging config sources in order onto new empty _config...
: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
DEBUG: Collection-driven: {}
DEBUGDEBUGDEBUG: Defaults: {'run': {'asynchronous': False, 'disown': False, 'dry': False, 'echo': False, 'echo_stdin': None, 'encoding': None, 'env': {}, 'err_stream': None, 'fallback': True, 'hide': None, 'in_stream': None, 'out_stream': None, 'echo_format': '\x1b[1;37m{command}\x1b[0m', 'pty': False, 'replace_env': False, 'shell': '/bin/bash', 'warn': False, 'watchers': []}, 'runners': {'local': <class 'invoke.runners.Local'>}, 'sudo': {'password': None, 'prompt': '[sudo] password: ', 'user': None}, 'tasks': {'auto_dash_names': True, 'collection_name': 'tasks', 'dedupe': True, 'executor_class': None, 'ignore_unknown_help': False, 'search_root': None}, 'timeouts': {'command': None}}
: Collection-driven: {}
: System-wide config file (/etc/invoke.py): {}
DEBUG: Collection-driven: {}
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUGDEBUG: Collection-driven: {}
: System-wide config file (/etc/invoke.py): {}
DEBUG: Per-project config file has not been loaded yet, skipping
DEBUGDEBUGDEBUGDEBUG: System-wide config file (/etc/invoke.py): {}
: Per-user config file (/home/el595/.invoke.py): {}
DEBUG: Environment variable config: {}
: System-wide config file (/etc/invoke.py): {}
: Per-user config file (/home/el595/.invoke.py): {}
DEBUGDEBUGDEBUG: Per-project config file has not been loaded yet, skipping
: Runtime config file has not been loaded yet, skipping
: Per-project config file has not been loaded yet, skipping
DEBUG: Per-user config file (/home/el595/.invoke.py): {}
DEBUGDEBUG: Overrides: {}
: Environment variable config: {}
DEBUGDEBUG: Modifications: {}
: Per-project config file has not been loaded yet, skipping
DEBUGDEBUG: Environment variable config: {}
: Runtime config file has not been loaded yet, skipping
DEBUGDEBUG: Runtime config file has not been loaded yet, skipping
: Deletions: {}
DEBUGDEBUG: Overrides: {}
: Environment variable config: {}
DEBUGDEBUG: Overrides: {}
DEBUGDEBUG: Modifications: {}
: Runtime config file has not been loaded yet, skipping
: Modifications: {}
DEBUGDEBUGDEBUG: Overrides: {}
: Deletions: {}
: Deletions: {}
DEBUG: Modifications: {}
DEBUG: Deletions: {}
make -C openlane fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32
make -C openlane fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16
make -C openlane fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8
make[1]: Entering directory '/scratch/caravel/el595/openlane'
make -C openlane fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16
make -C openlane fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8
make[1]: Entering directory '/scratch/caravel/el595/openlane'
make[1]: Entering directory '/scratch/caravel/el595/openlane'
make[1]: Entering directory '/scratch/caravel/el595/openlane'
make[1]: Entering directory '/scratch/caravel/el595/openlane'
# fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32
mkdir -p ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08 
# fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16
rm -rf ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32
ln -s $(realpath ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08) ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32
mkdir -p ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08 
# fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8
rm -rf ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16
ln -s $(realpath ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08) ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16
mkdir -p ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08 
docker run --rm -u $(id -u $USER):$(id -g $USER) -v $(realpath /scratch/caravel/el595/..):$(realpath /scratch/caravel/el595/..) -v /classes/c2s2/pdks:/classes/c2s2/pdks -v /scratch/caravel/el595/caravel:/scratch/caravel/el595/caravel -v /classes/c2s2/openlane:/openlane -v /scratch/caravel/el595/mgmt_core_wrapper:/scratch/caravel/el595/mgmt_core_wrapper -e PDK_ROOT=/classes/c2s2/pdks -e PDK=sky130A -e MISMATCHES_OK=1 -e CARAVEL_ROOT=/scratch/caravel/el595/caravel -e OPENLANE_RUN_TAG=24_03_21_19_08 -e MCW_ROOT=/scratch/caravel/el595/mgmt_core_wrapper  \
	efabless/openlane:2023.07.19-1 sh -c "flow.tcl -design $(realpath ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32) -save_path $(realpath ..) -save -tag 24_03_21_19_08 -overwrite -ignore_mismatches"
# fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16
rm -rf ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8
mkdir -p ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08 
docker run --rm -u $(id -u $USER):$(id -g $USER) -v $(realpath /scratch/caravel/el595/..):$(realpath /scratch/caravel/el595/..) -v /classes/c2s2/pdks:/classes/c2s2/pdks -v /scratch/caravel/el595/caravel:/scratch/caravel/el595/caravel -v /classes/c2s2/openlane:/openlane -v /scratch/caravel/el595/mgmt_core_wrapper:/scratch/caravel/el595/mgmt_core_wrapper -e PDK_ROOT=/classes/c2s2/pdks -e PDK=sky130A -e MISMATCHES_OK=1 -e CARAVEL_ROOT=/scratch/caravel/el595/caravel -e OPENLANE_RUN_TAG=24_03_21_19_08 -e MCW_ROOT=/scratch/caravel/el595/mgmt_core_wrapper  \
	efabless/openlane:2023.07.19-1 sh -c "flow.tcl -design $(realpath ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16) -save_path $(realpath ..) -save -tag 24_03_21_19_08 -overwrite -ignore_mismatches"
ln -s $(realpath ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08) ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8
rm -rf ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16
ln -s $(realpath ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08) ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16
docker run --rm -u $(id -u $USER):$(id -g $USER) -v $(realpath /scratch/caravel/el595/..):$(realpath /scratch/caravel/el595/..) -v /classes/c2s2/pdks:/classes/c2s2/pdks -v /scratch/caravel/el595/caravel:/scratch/caravel/el595/caravel -v /classes/c2s2/openlane:/openlane -v /scratch/caravel/el595/mgmt_core_wrapper:/scratch/caravel/el595/mgmt_core_wrapper -e PDK_ROOT=/classes/c2s2/pdks -e PDK=sky130A -e MISMATCHES_OK=1 -e CARAVEL_ROOT=/scratch/caravel/el595/caravel -e OPENLANE_RUN_TAG=24_03_21_19_08 -e MCW_ROOT=/scratch/caravel/el595/mgmt_core_wrapper  \
	efabless/openlane:2023.07.19-1 sh -c "flow.tcl -design $(realpath ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8) -save_path $(realpath ..) -save -tag 24_03_21_19_08 -overwrite -ignore_mismatches"
docker run --rm -u $(id -u $USER):$(id -g $USER) -v $(realpath /scratch/caravel/el595/..):$(realpath /scratch/caravel/el595/..) -v /classes/c2s2/pdks:/classes/c2s2/pdks -v /scratch/caravel/el595/caravel:/scratch/caravel/el595/caravel -v /classes/c2s2/openlane:/openlane -v /scratch/caravel/el595/mgmt_core_wrapper:/scratch/caravel/el595/mgmt_core_wrapper -e PDK_ROOT=/classes/c2s2/pdks -e PDK=sky130A -e MISMATCHES_OK=1 -e CARAVEL_ROOT=/scratch/caravel/el595/caravel -e OPENLANE_RUN_TAG=24_03_21_19_08 -e MCW_ROOT=/scratch/caravel/el595/mgmt_core_wrapper  \
	efabless/openlane:2023.07.19-1 sh -c "flow.tcl -design $(realpath ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16) -save_path $(realpath ..) -save -tag 24_03_21_19_08 -overwrite -ignore_mismatches"
# fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8
mkdir -p ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08 
rm -rf ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8
ln -s $(realpath ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08) ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8
docker run --rm -u $(id -u $USER):$(id -g $USER) -v $(realpath /scratch/caravel/el595/..):$(realpath /scratch/caravel/el595/..) -v /classes/c2s2/pdks:/classes/c2s2/pdks -v /scratch/caravel/el595/caravel:/scratch/caravel/el595/caravel -v /classes/c2s2/openlane:/openlane -v /scratch/caravel/el595/mgmt_core_wrapper:/scratch/caravel/el595/mgmt_core_wrapper -e PDK_ROOT=/classes/c2s2/pdks -e PDK=sky130A -e MISMATCHES_OK=1 -e CARAVEL_ROOT=/scratch/caravel/el595/caravel -e OPENLANE_RUN_TAG=24_03_21_19_08 -e MCW_ROOT=/scratch/caravel/el595/mgmt_core_wrapper  \
	efabless/openlane:2023.07.19-1 sh -c "flow.tcl -design $(realpath ./fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8) -save_path $(realpath ..) -save -tag 24_03_21_19_08 -overwrite -ignore_mismatches"
OpenLane 30ee1388932eb55a89ad84ee43997bfe3a386421
All rights reserved. (c) 2020-2022 Efabless Corporation and contributors.
Available under the Apache License, version 2.0. See the LICENSE file for more details.

OpenLane 30ee1388932eb55a89ad84ee43997bfe3a386421
All rights reserved. (c) 2020-2022 Efabless Corporation and contributors.
Available under the Apache License, version 2.0. See the LICENSE file for more details.

OpenLane 30ee1388932eb55a89ad84ee43997bfe3a386421
All rights reserved. (c) 2020-2022 Efabless Corporation and contributors.
Available under the Apache License, version 2.0. See the LICENSE file for more details.

OpenLane 30ee1388932eb55a89ad84ee43997bfe3a386421
All rights reserved. (c) 2020-2022 Efabless Corporation and contributors.
Available under the Apache License, version 2.0. See the LICENSE file for more details.

OpenLane 30ee1388932eb55a89ad84ee43997bfe3a386421
All rights reserved. (c) 2020-2022 Efabless Corporation and contributors.
Available under the Apache License, version 2.0. See the LICENSE file for more details.

[INFO]: Using configuration in '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/config.json'...
[INFO]: Using configuration in '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/config.json'...
[INFO]: Using configuration in '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/config.json'...
[INFO]: Using configuration in '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/config.json'...
[INFO]: Using configuration in '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/config.json'...
[INFO]: PDK Root: /classes/c2s2/pdks
[INFO]: Process Design Kit: sky130A
[INFO]: PDK Root: /classes/c2s2/pdks
[INFO]: Process Design Kit: sky130A
[INFO]: PDK Root: /classes/c2s2/pdks
[INFO]: Process Design Kit: sky130A
[INFO]: Standard Cell Library: sky130_fd_sc_hd
[INFO]: Optimization Standard Cell Library: sky130_fd_sc_hd
[INFO]: Standard Cell Library: sky130_fd_sc_hd
[INFO]: Optimization Standard Cell Library: sky130_fd_sc_hd
[INFO]: Standard Cell Library: sky130_fd_sc_hd
[INFO]: Optimization Standard Cell Library: sky130_fd_sc_hd
[INFO]: PDK Root: /classes/c2s2/pdks
[INFO]: Process Design Kit: sky130A
[INFO]: Standard Cell Library: sky130_fd_sc_hd
[INFO]: Optimization Standard Cell Library: sky130_fd_sc_hd
[INFO]: PDK Root: /classes/c2s2/pdks
[INFO]: Process Design Kit: sky130A
[INFO]: Standard Cell Library: sky130_fd_sc_hd
[INFO]: Optimization Standard Cell Library: sky130_fd_sc_hd
[INFO]: Run Directory: /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08
[INFO]: Run Directory: /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08
[INFO]: Run Directory: /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08
[INFO]: Saving runtime environment...
[INFO]: Saving runtime environment...
[INFO]: Run Directory: /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08
[INFO]: Saving runtime environment...
[INFO]: Saving runtime environment...
[INFO]: Run Directory: /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08
[INFO]: Saving runtime environment...
[INFO]: Preparing LEF files for the nom corner...
[INFO]: Preparing LEF files for the nom corner...
[INFO]: Preparing LEF files for the nom corner...
[INFO]: Preparing LEF files for the nom corner...
[INFO]: Preparing LEF files for the nom corner...
[INFO]: Preparing LEF files for the min corner...
[INFO]: Preparing LEF files for the min corner...
[INFO]: Preparing LEF files for the min corner...
[INFO]: Preparing LEF files for the min corner...
[INFO]: Preparing LEF files for the max corner...
[INFO]: Preparing LEF files for the max corner...
[INFO]: Preparing LEF files for the max corner...
[INFO]: Preparing LEF files for the max corner...
[INFO]: Preparing LEF files for the min corner...
[INFO]: Preparing LEF files for the max corner...
[INFO]: Running linter (Verilator) (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/synthesis/linter.log)...
[INFO]: Running linter (Verilator) (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/synthesis/linter.log)...
[INFO]: Running linter (Verilator) (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/synthesis/linter.log)...
[INFO]: Running linter (Verilator) (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/synthesis/linter.log)...
[INFO]: Running linter (Verilator) (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/synthesis/linter.log)...
[INFO]: 0 errors found by linter
[WARNING]: 3 warnings found by linter
[INFO]: 0 errors found by linter
[STEP 1]
[WARNING]: 4 warnings found by linter
[INFO]: 0 errors found by linter
[INFO]: 0 errors found by linter
[STEP 1]
[WARNING]: 4 warnings found by linter
[STEP 1]
[WARNING]: 3 warnings found by linter
[INFO]: 0 errors found by linter
[INFO]: Running Synthesis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/synthesis/1-synthesis.log)...
[STEP 1]
[WARNING]: 4 warnings found by linter
[STEP 1]
[INFO]: Running Synthesis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/synthesis/1-synthesis.log)...
[INFO]: Running Synthesis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/synthesis/1-synthesis.log)...
[INFO]: Running Synthesis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/synthesis/1-synthesis.log)...
[INFO]: Running Synthesis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/synthesis/1-synthesis.log)...
[STEP 2]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/synthesis/2-sta.log)...
[STEP 3]
[INFO]: Running Initial Floorplanning (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/floorplan/3-initial_fp.log)...
[INFO]: Floorplanned with width 388.7 and height 378.08.
[STEP 4]
[INFO]: Running IO Placement (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/floorplan/4-place_io.log)...
[STEP 5]
[INFO]: Running Tap/Decap Insertion (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/floorplan/5-tap.log)...
[INFO]: Power planning with power {VPWR} and ground {VGND}...
[STEP 6]
[INFO]: Generating PDN (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/floorplan/6-pdn.log)...
[STEP 7]
[INFO]: Running Global Placement (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/placement/7-global.log)...
[STEP 8]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/placement/8-gpl_sta.log)...
[STEP 9]
[INFO]: Running Placement Resizer Design Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/placement/9-resizer.log)...
[STEP 10]
[INFO]: Running Detailed Placement (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/placement/10-detailed.log)...
[STEP 11]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/placement/11-dpl_sta.log)...
[STEP 12]
[INFO]: Running Clock Tree Synthesis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/cts/12-cts.log)...
[STEP 13]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/cts/13-cts_sta.log)...
[STEP 14]
[INFO]: Running Placement Resizer Timing Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/cts/14-resizer.log)...
[STEP 15]
[INFO]: Running Global Routing Resizer Design Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/15-resizer_design.log)...
[STEP 16]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/16-rsz_design_sta.log)...
[STEP 2]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/synthesis/2-sta.log)...
[STEP 3]
[INFO]: Running Initial Floorplanning (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/floorplan/3-initial_fp.log)...
[STEP 17]
[INFO]: Running Global Routing Resizer Timing Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/17-resizer_timing.log)...
[INFO]: Floorplanned with width 788.9 and height 777.92.
[STEP 4]
[INFO]: Running IO Placement (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/floorplan/4-place_io.log)...
[STEP 5]
[INFO]: Running Tap/Decap Insertion (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/floorplan/5-tap.log)...
[INFO]: Power planning with power {VPWR} and ground {VGND}...
[STEP 6]
[INFO]: Generating PDN (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/floorplan/6-pdn.log)...
[STEP 18]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/18-rsz_timing_sta.log)...
[STEP 7]
[INFO]: Running Global Placement (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/placement/7-global.log)...
[STEP 19]
[INFO]: Running Global Routing (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/19-global.log)...
[INFO]: Starting OpenROAD Antenna Repair Iterations...
[STEP 20]
[INFO]: Writing Verilog (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/19-global_write_netlist.log)...
[STEP 2]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/synthesis/2-sta.log)...
[STEP 21]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/21-grt_sta.log)...
[STEP 22]
[INFO]: Running Fill Insertion (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/22-fill.log)...
[STEP 3]
[INFO]: Running Initial Floorplanning (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/floorplan/3-initial_fp.log)...
[STEP 23]
[INFO]: Running Detailed Routing (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/23-detailed.log)...
[INFO]: Floorplanned with width 788.9 and height 777.92.
[STEP 4]
[INFO]: Running IO Placement (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/floorplan/4-place_io.log)...
[STEP 5]
[INFO]: Running Tap/Decap Insertion (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/floorplan/5-tap.log)...
[INFO]: Power planning with power {VPWR} and ground {VGND}...
[STEP 6]
[INFO]: Generating PDN (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/floorplan/6-pdn.log)...
[STEP 7]
[INFO]: Running Global Placement (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/placement/7-global.log)...
[STEP 8]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/placement/8-gpl_sta.log)...
[STEP 9]
[INFO]: Running Placement Resizer Design Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/placement/9-resizer.log)...
[STEP 10]
[INFO]: Running Detailed Placement (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/placement/10-detailed.log)...
[STEP 8]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/placement/8-gpl_sta.log)...
[STEP 11]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/placement/11-dpl_sta.log)...
[STEP 9]
[INFO]: Running Placement Resizer Design Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/placement/9-resizer.log)...
[STEP 12]
[INFO]: Running Clock Tree Synthesis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/cts/12-cts.log)...
[STEP 10]
[INFO]: Running Detailed Placement (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/placement/10-detailed.log)...
[STEP 11]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/placement/11-dpl_sta.log)...
[STEP 12]
[INFO]: Running Clock Tree Synthesis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/cts/12-cts.log)...
[STEP 13]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/cts/13-cts_sta.log)...
[STEP 14]
[INFO]: Running Placement Resizer Timing Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/cts/14-resizer.log)...
[STEP 13]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/cts/13-cts_sta.log)...
[STEP 14]
[INFO]: Running Placement Resizer Timing Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/cts/14-resizer.log)...
[STEP 15]
[INFO]: Running Global Routing Resizer Design Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/routing/15-resizer_design.log)...
[STEP 16]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/routing/16-rsz_design_sta.log)...
[STEP 17]
[INFO]: Running Global Routing Resizer Timing Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/routing/17-resizer_timing.log)...
[STEP 15]
[INFO]: Running Global Routing Resizer Design Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/15-resizer_design.log)...
[STEP 18]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/routing/18-rsz_timing_sta.log)...
[STEP 19]
[INFO]: Running Global Routing (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/routing/19-global.log)...
[STEP 2]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/synthesis/2-sta.log)...
[STEP 16]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/16-rsz_design_sta.log)...
[STEP 3]
[INFO]: Running Initial Floorplanning (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/floorplan/3-initial_fp.log)...
[INFO]: Floorplanned with width 1588.84 and height 1577.6.
[STEP 4]
[INFO]: Running IO Placement (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/floorplan/4-place_io.log)...
[STEP 5]
[INFO]: Running Tap/Decap Insertion (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/floorplan/5-tap.log)...
[INFO]: Power planning with power {VPWR} and ground {VGND}...
[STEP 6]
[INFO]: Generating PDN (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/floorplan/6-pdn.log)...
[INFO]: Starting OpenROAD Antenna Repair Iterations...
[STEP 20]
[INFO]: Writing Verilog (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/routing/19-global_write_netlist.log)...
[STEP 21]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/routing/21-grt_sta.log)...
[STEP 17]
[INFO]: Running Global Routing Resizer Timing Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/17-resizer_timing.log)...
[STEP 22]
[INFO]: Running Fill Insertion (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/routing/22-fill.log)...
[STEP 7]
[INFO]: Running Global Placement (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/placement/7-global.log)...
[STEP 23]
[INFO]: Running Detailed Routing (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/routing/23-detailed.log)...
[STEP 18]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/18-rsz_timing_sta.log)...
[STEP 19]
[INFO]: Running Global Routing (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/19-global.log)...
[INFO]: Starting OpenROAD Antenna Repair Iterations...
[STEP 20]
[INFO]: Writing Verilog (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/19-global_write_netlist.log)...
[STEP 21]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/21-grt_sta.log)...
[STEP 22]
[INFO]: Running Fill Insertion (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/22-fill.log)...
[STEP 23]
[INFO]: Running Detailed Routing (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/23-detailed.log)...
[STEP 2]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/synthesis/2-sta.log)...
[STEP 3]
[INFO]: Running Initial Floorplanning (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/floorplan/3-initial_fp.log)...
[INFO]: Floorplanned with width 1588.84 and height 1577.6.
[STEP 4]
[INFO]: Running IO Placement (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/floorplan/4-place_io.log)...
[STEP 5]
[INFO]: Running Tap/Decap Insertion (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/floorplan/5-tap.log)...
[INFO]: Power planning with power {VPWR} and ground {VGND}...
[STEP 6]
[INFO]: Generating PDN (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/floorplan/6-pdn.log)...
[STEP 7]
[INFO]: Running Global Placement (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/placement/7-global.log)...
[STEP 8]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/placement/8-gpl_sta.log)...
[STEP 9]
[INFO]: Running Placement Resizer Design Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/placement/9-resizer.log)...
[STEP 10]
[INFO]: Running Detailed Placement (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/placement/10-detailed.log)...
[STEP 11]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/placement/11-dpl_sta.log)...
[STEP 12]
[INFO]: Running Clock Tree Synthesis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/cts/12-cts.log)...
[STEP 13]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/cts/13-cts_sta.log)...
[STEP 14]
[INFO]: Running Placement Resizer Timing Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/cts/14-resizer.log)...
[STEP 8]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/placement/8-gpl_sta.log)...
[STEP 9]
[INFO]: Running Placement Resizer Design Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/placement/9-resizer.log)...
[STEP 10]
[INFO]: Running Detailed Placement (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/placement/10-detailed.log)...
[STEP 11]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/placement/11-dpl_sta.log)...
[STEP 12]
[INFO]: Running Clock Tree Synthesis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/cts/12-cts.log)...
[STEP 13]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/cts/13-cts_sta.log)...
[STEP 14]
[INFO]: Running Placement Resizer Timing Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/cts/14-resizer.log)...
[STEP 15]
[INFO]: Running Global Routing Resizer Design Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/routing/15-resizer_design.log)...
[STEP 16]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/routing/16-rsz_design_sta.log)...
[STEP 17]
[INFO]: Running Global Routing Resizer Timing Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/routing/17-resizer_timing.log)...
[STEP 15]
[INFO]: Running Global Routing Resizer Design Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/routing/15-resizer_design.log)...
[ERROR]: during executing openroad script /openlane/scripts/openroad/resizer_routing_timing.tcl
[ERROR]: Log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/logs/routing/17-resizer_timing.log
[ERROR]: Last 10 lines:
[INFO GRT-0009] rerouting 2 nets.
[INFO GRT-0001] Minimum degree: 6
[INFO GRT-0002] Maximum degree: 7
[INFO GRT-0009] rerouting 2 nets.
[INFO GRT-0001] Minimum degree: 6
[INFO GRT-0002] Maximum degree: 6
[INFO GRT-0009] rerouting 4 nets.
[INFO GRT-0009] rerouting 9 nets.
[INFO GRT-0009] rerouting 11 nets.
child killed: segmentation violation

[ERROR]: Creating issue reproducible...
[INFO]: Saving runtime environment...
OpenLane TCL Issue Packager

EFABLESS CORPORATION AND ALL AUTHORS OF THE OPENLANE PROJECT SHALL NOT BE HELD
LIABLE FOR ANY LEAKS THAT MAY OCCUR TO ANY PROPRIETARY DATA AS A RESULT OF USING
THIS SCRIPT. THIS SCRIPT IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND.

BY USING THIS SCRIPT, YOU ACKNOWLEDGE THAT YOU FULLY UNDERSTAND THIS DISCLAIMER
AND ALL IT ENTAILS.

Parsing config file(s)…
Setting up /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/issue_reproducible…
[WRN] /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/tmp/17-fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32.sdc was not found, might be a product. Skipping
Done.
[INFO]: Reproducible packaged: Please tarball and upload '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/issue_reproducible' if you're going to submit an issue.
[ERROR]: Step 17 (routing) failed with error:
-code 1 -level 0 -errorcode NONE -errorinfo {
    while executing
"throw_error"
    (procedure "run_tcl_script" line 219)
    invoked from within
"run_tcl_script -tool openroad -no_consume {*}$args"
    (procedure "run_openroad_script" line 2)
    invoked from within
"run_openroad_script $::env(SCRIPTS_DIR)/openroad/resizer_routing_timing.tcl -indexed_log $log -save "dir=$::env(routing_tmpfiles),def,sdc,odb,netlist,..."
    (procedure "run_resizer_timing_routing" line 9)
    invoked from within
"run_resizer_timing_routing"
    (procedure "run_routing" line 9)
    invoked from within
"run_routing"
    (procedure "run_routing_step" line 7)
    invoked from within
"run_routing_step"} -errorline 1
[INFO]: Saving current set of views in '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/results/final'...
[INFO]: Generating final set of reports...
[INFO]: Created manufacturability report at '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/reports/manufacturability.rpt'.
[INFO]: Created metrics report at '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32/runs/24_03_21_19_08/reports/metrics.csv'.
[INFO]: Saving runtime environment...
[ERROR]: Flow failed.
[INFO]: The failure may have been because of the following warnings:
[WARNING]: 4 warnings found by linter

make[1]: *** [Makefile:79: fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32] Error 255
make[1]: Leaving directory '/scratch/caravel/el595/openlane'
make: *** [Makefile:123: fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32] Error 2
ERROR: Synthesis failed for PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32
[STEP 16]
[INFO]: Running Single-Corner Static Timing Analysis (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/routing/16-rsz_design_sta.log)...
[STEP 17]
[INFO]: Running Global Routing Resizer Timing Optimizations (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/routing/17-resizer_timing.log)...
[ERROR]: during executing openroad script /openlane/scripts/openroad/resizer_routing_timing.tcl
[ERROR]: Log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/logs/routing/17-resizer_timing.log
[ERROR]: Last 10 lines:
[INFO GRT-0009] rerouting 4 nets.
[INFO GRT-0001] Minimum degree: 4
[INFO GRT-0002] Maximum degree: 7
[INFO GRT-0009] rerouting 5 nets.
[INFO GRT-0001] Minimum degree: 3
[INFO GRT-0002] Maximum degree: 8
[INFO GRT-0009] rerouting 5 nets.
[INFO GRT-0009] rerouting 9 nets.
[INFO GRT-0009] rerouting 13 nets.
child killed: segmentation violation

[ERROR]: Creating issue reproducible...
[INFO]: Saving runtime environment...
[INFO]: No DRC violations after detailed routing.
[STEP 24]
[INFO]: Checking Wire Lengths (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/24-wire_lengths.log)...
OpenLane TCL Issue Packager

EFABLESS CORPORATION AND ALL AUTHORS OF THE OPENLANE PROJECT SHALL NOT BE HELD
LIABLE FOR ANY LEAKS THAT MAY OCCUR TO ANY PROPRIETARY DATA AS A RESULT OF USING
THIS SCRIPT. THIS SCRIPT IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND.

BY USING THIS SCRIPT, YOU ACKNOWLEDGE THAT YOU FULLY UNDERSTAND THIS DISCLAIMER
AND ALL IT ENTAILS.

Parsing config file(s)…
Setting up /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/issue_reproducible…
[WRN] /scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/tmp/17-fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16.sdc was not found, might be a product. Skipping
Done.
[INFO]: Reproducible packaged: Please tarball and upload '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/issue_reproducible' if you're going to submit an issue.
[ERROR]: Step 17 (routing) failed with error:
-code 1 -level 0 -errorcode NONE -errorinfo {
    while executing
"throw_error"
    (procedure "run_tcl_script" line 219)
    invoked from within
"run_tcl_script -tool openroad -no_consume {*}$args"
    (procedure "run_openroad_script" line 2)
    invoked from within
"run_openroad_script $::env(SCRIPTS_DIR)/openroad/resizer_routing_timing.tcl -indexed_log $log -save "dir=$::env(routing_tmpfiles),def,sdc,odb,netlist,..."
    (procedure "run_resizer_timing_routing" line 9)
    invoked from within
"run_resizer_timing_routing"
    (procedure "run_routing" line 9)
    invoked from within
"run_routing"
    (procedure "run_routing_step" line 7)
    invoked from within
"run_routing_step"} -errorline 1
[INFO]: Saving current set of views in '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/results/final'...
[STEP 25]
[INFO]: Running SPEF Extraction at the min process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/25-parasitics_extraction.min.log)...
[INFO]: Generating final set of reports...
[STEP 26]
[INFO]: Running Multi-Corner Static Timing Analysis at the min process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/26-rcx_mcsta.min.log)...
[INFO]: Created manufacturability report at '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/reports/manufacturability.rpt'.
[INFO]: Created metrics report at '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16/runs/24_03_21_19_08/reports/metrics.csv'.
[INFO]: Saving runtime environment...
[ERROR]: Flow failed.
[INFO]: The failure may have been because of the following warnings:
[WARNING]: 4 warnings found by linter

make[1]: Leaving directory '/scratch/caravel/el595/openlane'
make[1]: *** [Makefile:79: fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16] Error 255
make: *** [Makefile:123: fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16] Error 2
ERROR: Synthesis failed for PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16
[STEP 27]
[INFO]: Running SPEF Extraction at the max process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/27-parasitics_extraction.max.log)...
[STEP 28]
[INFO]: Running Multi-Corner Static Timing Analysis at the max process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/28-rcx_mcsta.max.log)...
[STEP 29]
[INFO]: Running SPEF Extraction at the nom process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/29-parasitics_extraction.nom.log)...
[STEP 30]
[INFO]: Running Multi-Corner Static Timing Analysis at the nom process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/30-rcx_mcsta.nom.log)...
[STEP 31]
[INFO]: Running Single-Corner Static Timing Analysis at the nom process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/31-rcx_sta.log)...
[WARNING]: Module sky130_fd_sc_hd__tapvpwrvgnd_1 blackboxed during sta
[WARNING]: Module sky130_ef_sc_hd__decap_12 blackboxed during sta
[WARNING]: Module sky130_fd_sc_hd__fill_1 blackboxed during sta
[WARNING]: Module sky130_fd_sc_hd__fill_2 blackboxed during sta
[STEP 32]
[INFO]: Creating IR Drop Report (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/32-irdrop.log)...
[WARNING]: VSRC_LOC_FILES is not defined. The IR drop analysis will run, but the values may be inaccurate.
[STEP 33]
[INFO]: Running Magic to generate various views...
[INFO]: Streaming out GDSII with Magic (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/33-gdsii.log)...
[INFO]: Generating MAGLEF views...
[INFO]: Generating lef with Magic (/scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/33-lef.log)...
[STEP 34]
[INFO]: Streaming out GDSII with KLayout (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/34-gdsii-klayout.log)...
[STEP 35]
[INFO]: Running XOR on the layouts using KLayout (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/35-xor.log)...
[INFO]: No XOR differences between KLayout and Magic gds.
[STEP 36]
[INFO]: Running Magic Spice Export from LEF (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/36-spice.log)...
[STEP 37]
[INFO]: Writing Powered Verilog (logs: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/37-write_powered_def.log, ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/37-write_powered_verilog.log)...
[STEP 38]
[INFO]: Writing Verilog (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/37-write_powered_verilog.log)...
[STEP 39]
[INFO]: Running LVS (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/39-lvs.lef.log)...
[STEP 40]
[INFO]: Running Magic DRC (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/40-drc.log)...
[INFO]: Converting Magic DRC database to various tool-readable formats...
[INFO]: No DRC violations after GDS streaming out.
[STEP 41]
[INFO]: Running OpenROAD Antenna Rule Checker (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/41-arc.log)...
[STEP 42]
[INFO]: Running Circuit Validity Checker ERC (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/42-erc_screen.log)...
[INFO]: Saving current set of views in '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/results/final'...
[INFO]: Saving current set of views in '../scratch/caravel/el595'...
[INFO]: Saving runtime environment...
[INFO]: Generating final set of reports...
[INFO]: Created manufacturability report at '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/reports/manufacturability.rpt'.
[INFO]: Created metrics report at '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/reports/metrics.csv'.
[WARNING]: There are max fanout violations in the design at the typical corner. Please refer to '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/reports/signoff/31-rcx_sta.checks.rpt'.
[INFO]: There are no hold violations in the design at the typical corner.
[INFO]: There are no setup violations in the design at the typical corner.
[SUCCESS]: Flow complete.
[INFO]: Note that the following warnings have been generated:
[WARNING]: 3 warnings found by linter
[WARNING]: Module sky130_fd_sc_hd__tapvpwrvgnd_1 blackboxed during sta
[WARNING]: Module sky130_ef_sc_hd__decap_12 blackboxed during sta
[WARNING]: Module sky130_fd_sc_hd__fill_1 blackboxed during sta
[WARNING]: Module sky130_fd_sc_hd__fill_2 blackboxed during sta
[WARNING]: VSRC_LOC_FILES is not defined. The IR drop analysis will run, but the values may be inaccurate.
[WARNING]: There are max fanout violations in the design at the typical corner. Please refer to '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_8/runs/24_03_21_19_08/reports/signoff/31-rcx_sta.checks.rpt'.

make[1]: Leaving directory '/scratch/caravel/el595/openlane'
[INFO]: No DRC violations after detailed routing.
[STEP 24]
[INFO]: Checking Wire Lengths (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/routing/24-wire_lengths.log)...
[STEP 25]
[INFO]: Running SPEF Extraction at the min process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/25-parasitics_extraction.min.log)...
[STEP 26]
[INFO]: Running Multi-Corner Static Timing Analysis at the min process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/26-rcx_mcsta.min.log)...
[STEP 27]
[INFO]: Running SPEF Extraction at the max process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/27-parasitics_extraction.max.log)...
[STEP 28]
[INFO]: Running Multi-Corner Static Timing Analysis at the max process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/28-rcx_mcsta.max.log)...
[STEP 29]
[INFO]: Running SPEF Extraction at the nom process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/29-parasitics_extraction.nom.log)...
[STEP 30]
[INFO]: Running Multi-Corner Static Timing Analysis at the nom process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/30-rcx_mcsta.nom.log)...
[STEP 31]
[INFO]: Running Single-Corner Static Timing Analysis at the nom process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/31-rcx_sta.log)...
[WARNING]: Module sky130_fd_sc_hd__tapvpwrvgnd_1 blackboxed during sta
[WARNING]: Module sky130_ef_sc_hd__decap_12 blackboxed during sta
[WARNING]: Module sky130_fd_sc_hd__fill_1 blackboxed during sta
[WARNING]: Module sky130_fd_sc_hd__fill_2 blackboxed during sta
[STEP 32]
[INFO]: Creating IR Drop Report (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/32-irdrop.log)...
[WARNING]: VSRC_LOC_FILES is not defined. The IR drop analysis will run, but the values may be inaccurate.
[STEP 33]
[INFO]: Running Magic to generate various views...
[INFO]: Streaming out GDSII with Magic (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/33-gdsii.log)...
[INFO]: Generating MAGLEF views...
[INFO]: Generating lef with Magic (/scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/33-lef.log)...
[STEP 34]
[INFO]: Streaming out GDSII with KLayout (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/34-gdsii-klayout.log)...
[STEP 35]
[INFO]: Running XOR on the layouts using KLayout (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/35-xor.log)...
[INFO]: No XOR differences between KLayout and Magic gds.
[STEP 36]
[INFO]: Running Magic Spice Export from LEF (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/36-spice.log)...
[INFO]: No DRC violations after detailed routing.
[STEP 24]
[INFO]: Checking Wire Lengths (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/routing/24-wire_lengths.log)...
[STEP 25]
[INFO]: Running SPEF Extraction at the min process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/25-parasitics_extraction.min.log)...
[STEP 26]
[INFO]: Running Multi-Corner Static Timing Analysis at the min process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/26-rcx_mcsta.min.log)...
[STEP 37]
[INFO]: Writing Powered Verilog (logs: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/37-write_powered_def.log, ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/37-write_powered_verilog.log)...
[STEP 38]
[INFO]: Writing Verilog (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/37-write_powered_verilog.log)...
[STEP 39]
[INFO]: Running LVS (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/39-lvs.lef.log)...
[STEP 40]
[INFO]: Running Magic DRC (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/40-drc.log)...
[STEP 27]
[INFO]: Running SPEF Extraction at the max process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/27-parasitics_extraction.max.log)...
[STEP 28]
[INFO]: Running Multi-Corner Static Timing Analysis at the max process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/28-rcx_mcsta.max.log)...
[INFO]: Converting Magic DRC database to various tool-readable formats...
[INFO]: No DRC violations after GDS streaming out.
[STEP 41]
[INFO]: Running OpenROAD Antenna Rule Checker (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/41-arc.log)...
[STEP 42]
[INFO]: Running Circuit Validity Checker ERC (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/logs/signoff/42-erc_screen.log)...
[INFO]: Saving current set of views in '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/results/final'...
[INFO]: Saving current set of views in '../scratch/caravel/el595'...
[INFO]: Saving runtime environment...
[INFO]: Generating final set of reports...
[INFO]: Created manufacturability report at '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/reports/manufacturability.rpt'.
[INFO]: Created metrics report at '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/reports/metrics.csv'.
[WARNING]: There are max slew violations in the design at the typical corner. Please refer to '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/reports/signoff/31-rcx_sta.checks.rpt'.
[WARNING]: There are max fanout violations in the design at the typical corner. Please refer to '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/reports/signoff/31-rcx_sta.checks.rpt'.
[INFO]: There are no hold violations in the design at the typical corner.
[INFO]: There are no setup violations in the design at the typical corner.
[SUCCESS]: Flow complete.
[INFO]: Note that the following warnings have been generated:
[WARNING]: 3 warnings found by linter
[WARNING]: Module sky130_fd_sc_hd__tapvpwrvgnd_1 blackboxed during sta
[WARNING]: Module sky130_ef_sc_hd__decap_12 blackboxed during sta
[WARNING]: Module sky130_fd_sc_hd__fill_1 blackboxed during sta
[WARNING]: Module sky130_fd_sc_hd__fill_2 blackboxed during sta
[WARNING]: VSRC_LOC_FILES is not defined. The IR drop analysis will run, but the values may be inaccurate.
[WARNING]: There are max slew violations in the design at the typical corner. Please refer to '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/reports/signoff/31-rcx_sta.checks.rpt'.
[WARNING]: There are max fanout violations in the design at the typical corner. Please refer to '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_8/runs/24_03_21_19_08/reports/signoff/31-rcx_sta.checks.rpt'.

make[1]: Leaving directory '/scratch/caravel/el595/openlane'
[STEP 29]
[INFO]: Running SPEF Extraction at the nom process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/29-parasitics_extraction.nom.log)...
[STEP 30]
[INFO]: Running Multi-Corner Static Timing Analysis at the nom process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/30-rcx_mcsta.nom.log)...
[STEP 31]
[INFO]: Running Single-Corner Static Timing Analysis at the nom process corner (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/31-rcx_sta.log)...
[WARNING]: Module sky130_fd_sc_hd__tapvpwrvgnd_1 blackboxed during sta
[WARNING]: Module sky130_ef_sc_hd__decap_12 blackboxed during sta
[WARNING]: Module sky130_fd_sc_hd__fill_1 blackboxed during sta
[WARNING]: Module sky130_fd_sc_hd__fill_2 blackboxed during sta
[STEP 32]
[INFO]: Creating IR Drop Report (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/32-irdrop.log)...
[WARNING]: VSRC_LOC_FILES is not defined. The IR drop analysis will run, but the values may be inaccurate.
[STEP 33]
[INFO]: Running Magic to generate various views...
[INFO]: Streaming out GDSII with Magic (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/33-gdsii.log)...
[INFO]: Generating MAGLEF views...
[INFO]: Generating lef with Magic (/scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/33-lef.log)...
[STEP 34]
[INFO]: Streaming out GDSII with KLayout (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/34-gdsii-klayout.log)...
[STEP 35]
[INFO]: Running XOR on the layouts using KLayout (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/35-xor.log)...
[INFO]: No XOR differences between KLayout and Magic gds.
[STEP 36]
[INFO]: Running Magic Spice Export from LEF (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/36-spice.log)...
[STEP 37]
[INFO]: Writing Powered Verilog (logs: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/37-write_powered_def.log, ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/37-write_powered_verilog.log)...
[STEP 38]
[INFO]: Writing Verilog (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/37-write_powered_verilog.log)...
[STEP 39]
[INFO]: Running LVS (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/39-lvs.lef.log)...
[STEP 40]
[INFO]: Running Magic DRC (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/40-drc.log)...
[INFO]: Converting Magic DRC database to various tool-readable formats...
[INFO]: No DRC violations after GDS streaming out.
[STEP 41]
[INFO]: Running OpenROAD Antenna Rule Checker (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/41-arc.log)...
[STEP 42]
[INFO]: Running Circuit Validity Checker ERC (log: ../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/logs/signoff/42-erc_screen.log)...
[INFO]: Saving current set of views in '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/results/final'...
[INFO]: Saving current set of views in '../scratch/caravel/el595'...
[INFO]: Saving runtime environment...
[INFO]: Generating final set of reports...
[INFO]: Created manufacturability report at '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/reports/manufacturability.rpt'.
[INFO]: Created metrics report at '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/reports/metrics.csv'.
[WARNING]: There are max slew violations in the design at the typical corner. Please refer to '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/reports/signoff/31-rcx_sta.checks.rpt'.
[WARNING]: There are max fanout violations in the design at the typical corner. Please refer to '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/reports/signoff/31-rcx_sta.checks.rpt'.
[INFO]: There are no hold violations in the design at the typical corner.
[INFO]: There are no setup violations in the design at the typical corner.
[SUCCESS]: Flow complete.
[INFO]: Note that the following warnings have been generated:
[WARNING]: 4 warnings found by linter
[WARNING]: Module sky130_fd_sc_hd__tapvpwrvgnd_1 blackboxed during sta
[WARNING]: Module sky130_ef_sc_hd__decap_12 blackboxed during sta
[WARNING]: Module sky130_fd_sc_hd__fill_1 blackboxed during sta
[WARNING]: Module sky130_fd_sc_hd__fill_2 blackboxed during sta
[WARNING]: VSRC_LOC_FILES is not defined. The IR drop analysis will run, but the values may be inaccurate.
[WARNING]: There are max slew violations in the design at the typical corner. Please refer to '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/reports/signoff/31-rcx_sta.checks.rpt'.
[WARNING]: There are max fanout violations in the design at the typical corner. Please refer to '../scratch/caravel/el595/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_16/runs/24_03_21_19_08/reports/signoff/31-rcx_sta.checks.rpt'.

make[1]: Leaving directory '/scratch/caravel/el595/openlane'
ERROR: Synthesis failed
ERROR: Synthesis failed for the following designs:
	/home/el595/c2s2_ip/caravel/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_16__DECIMAL_PT_8__N_SAMPLES_32
	/home/el595/c2s2_ip/caravel/openlane/fft_pease_PeaseFFTWrapper__BIT_WIDTH_32__DECIMAL_PT_16__N_SAMPLES_16
ERROR: Subcommand synth failed with error code 1
